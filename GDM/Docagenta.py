import os
import sys
import logging
import time
import json
import subprocess
import tempfile
import shutil
import urllib.request
import urllib.error
import urllib.parse
import socket
from typing import List, Dict, Optional, Tuple, Any, Union
from dataclasses import dataclass, asdict
from pathlib import Path
import re
from datetime import datetime
import hashlib
import traceback
import asyncio
from concurrent.futures import ThreadPoolExecutor
import secrets  # Para gera√ß√£o de tokens de estado no fluxo OAuth

# =============================================================================
# CORRE√á√ÉO COMPLETA DO TORCH + AG2
# =============================================================================

def comprehensive_torch_ag2_fix():
    """
    Ajusta algumas vari√°veis de ambiente relacionadas ao Torch e AG2.

    Anteriormente este m√©todo fazia uma ampla monkey-patch em ``sys.modules``
    criando um m√≥dulo ``torch`` fict√≠cio quando a biblioteca n√£o estava instalada.
    Isso causava erros inesperados (como "'function' object is not iterable")
    durante a inicializa√ß√£o do AG2. Agora limitamos a configura√ß√£o √†s vari√°veis
    de ambiente e n√£o modificamos o sistema de m√≥dulos. Caso ``torch`` n√£o esteja
    instalado, a importa√ß√£o simplesmente falhar√° de forma controlada.
    """
    try:
        # Configurar vari√°veis de ambiente para silenciar avisos do tokenizers e Torch
        os.environ["TOKENIZERS_PARALLELISM"] = "false"
        os.environ["TORCH_SHOW_CPP_STACKTRACES"] = "0"
        os.environ["CUDA_VISIBLE_DEVICES"] = ""
        print("üîß Torch/AG2 fix aplicado")
    except Exception as e:
        # Em caso de falha inesperada, apenas registrar
        print(f"‚ö†Ô∏è Warning torch fix: {e}")

# Aplicar fix ANTES de qualquer outro import
comprehensive_torch_ag2_fix()

# FastAPI e depend√™ncias web
try:
    from fastapi import FastAPI, Request, HTTPException, BackgroundTasks
    from fastapi.responses import HTMLResponse, JSONResponse, FileResponse
    from fastapi.staticfiles import StaticFiles
    from fastapi.templating import Jinja2Templates
    import uvicorn
    WEB_AVAILABLE = True
    print("‚úÖ FastAPI dispon√≠vel")
except ImportError as e:
    WEB_AVAILABLE = False
    print(f"‚ùå FastAPI n√£o dispon√≠vel: {e}")
    print("Execute: pip install fastapi uvicorn jinja2")

# Pydantic com suporte V2
try:
    from pydantic import BaseModel, Field, ConfigDict
    PYDANTIC_V2 = True
    print("‚úÖ Pydantic V2 detectado")
except ImportError:
    try:
        from pydantic import BaseModel, Field
        PYDANTIC_V2 = False
        print("‚ö†Ô∏è Pydantic V1 em uso")
    except ImportError as e:
        print(f"‚ùå Pydantic n√£o dispon√≠vel: {e}")
        exit(1)

# AG2 imports com tratamento de erro melhorado
# Inicialmente assume que o modo AG2 est√° desativado at√© que a importa√ß√£o seja bem-sucedida.
AG2_AVAILABLE = False
try:
    # Antes de importar, verificar se o m√≥dulo auxiliar necess√°rio est√° presente.
    # Algumas vers√µes do AutoGen dependem do pacote fix_busted_json para realizar
    # tratamento de JSON na integra√ß√£o com Ollama. Se este pacote n√£o estiver
    # instalado, o AG2 ficar√° inoperante e √© melhor desabilitar o modo AG2 de
    # imediato para evitar erros em tempo de execu√ß√£o.
    try:
        import fix_busted_json  # noqa: F401
    except Exception:
        # Caso o pacote n√£o esteja dispon√≠vel, avisar o usu√°rio e manter o modo
        # simplificado. Na documenta√ß√£o do AutoGen 0.9.7 este requisito √© citado
        # como obrigat√≥rio quando se usa Ollama.
        raise ImportError("fix_busted_json ausente")

    # Tentar importar as classes a partir do pacote oficial "autogen". Para algumas vers√µes
    # (por exemplo, instaladas via autogen-agentchat) as classes podem estar no subm√≥dulo
    # ``autogen.agentchat``. Tentamos ambas as op√ß√µes.
    try:
        from autogen import ConversableAgent, GroupChat, GroupChatManager  # type: ignore
    except ImportError:
        # Fallback para vers√µes em que as classes ficam em autogen.agentchat
        from autogen.agentchat import ConversableAgent, GroupChat, GroupChatManager  # type: ignore
    AG2_AVAILABLE = True
    print("‚úÖ AG2 dispon√≠vel")
except ImportError as e:
    # Biblioteca ausente ou depend√™ncia obrigat√≥ria n√£o encontrada. Conforme a documenta√ß√£o oficial,
    # o pacote correto se chama ``autogen-agentchat`` e a partir da vers√£o 0.9.7
    # √© necess√°rio instalar tamb√©m o ``fix-busted-json`` para suporte a Ollama.
    AG2_AVAILABLE = False
    missing_pkg = str(e)
    print("‚ö†Ô∏è AG2 n√£o dispon√≠vel (modo simplificado ativo)")
    # Mensagem instrutiva para o usu√°rio
    print(
        "üí° Para habilitar o modo AG2, instale as depend√™ncias corretas. "
        "Use: pip install autogen-agentchat~=0.9.7 fix-busted-json"
    )
    # Em algumas plataformas o pacote se chama pyautogen. Tentar orientar se apropriado.
    if "autogen" in missing_pkg:
        print("üí¨ Depend√™ncia ausente:", missing_pkg)
    elif "fix_busted_json" in missing_pkg:
        print("üí¨ M√≥dulo fix_busted_json ausente. Instale com: pip install fix-busted-json")
except Exception as e:
    # Qualquer outro erro inesperado ao importar as classes do AG2
    AG2_AVAILABLE = False
    print("‚ö†Ô∏è Erro ao inicializar o AG2 (modo simplificado ativo)")
    print(f"Detalhes: {e}")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# =============================================================================
# MODELOS DE DADOS COMPAT√çVEIS COM PYDANTIC V2
# =============================================================================

@dataclass
class RepositorioInfo:
    """Informa√ß√µes de um reposit√≥rio GitHub"""
    nome: str
    nome_completo: str
    descricao: str
    url: str
    linguagem_principal: str
    estrelas: int
    forks: int
    tamanho_kb: int
    atualizado_em: str
    topicos: List[str]
    privado: bool

@dataclass
class FileAnalysis:
    """An√°lise detalhada de um arquivo"""
    name: str
    path: str
    language: str
    size: int
    lines: int
    functions: List[str]
    classes: List[str]
    imports: List[str]
    purpose: str
    summary: str
    complexity: str

class SearchRequest(BaseModel):
    usuario: str
    incluir_forks: bool = False

class AnalysisRequest(BaseModel):
    repo_url: str
    max_files: int = 25
    deep_analysis: bool = True
    include_config: bool = True
    model: Optional[str] = None
    anonymous: bool = True

# Adicionamos um modelo para autentica√ß√£o GitHub, permitindo que o usu√°rio
# forne√ßa um token de acesso pessoal. Este modelo ser√° utilizado na nova
# rota de autentica√ß√£o para reposit√≥rios privados.
class GitHubAuthRequest(BaseModel):
    token: str

# Modelo para requisi√ß√£o de login
class LoginRequest(BaseModel):
    username: str
    password: str


class AnalysisStatus(BaseModel):
    status: str
    phase: str
    progress: int
    message: str
    logs: List[str] = []
    current_step: str = ""

class DocItem(BaseModel):
    """Item de documenta√ß√£o - Compat√≠vel Pydantic V1/V2"""
    title: str = Field(description="T√≠tulo da se√ß√£o de documenta√ß√£o")
    description: str = Field(description="Descri√ß√£o detalhada do conte√∫do")
    prerequisites: str = Field(description="Pr√©-requisitos necess√°rios")
    examples: List[str] = Field(description="Lista de exemplos pr√°ticos", default_factory=list)
    goal: str = Field(description="Objetivo espec√≠fico da documenta√ß√£o")
    
    # Configura√ß√£o V2 (ignora se V1)
    if PYDANTIC_V2:
        model_config = ConfigDict(
            validate_assignment=True,
            extra='forbid'
        )
    
    def to_dict(self) -> Dict[str, Any]:
        """M√©todo compat√≠vel V1/V2 para serializa√ß√£o"""
        if PYDANTIC_V2:
            return self.model_dump()
        else:
            return self.dict()

class DocPlan(BaseModel):
    """Plano de documenta√ß√£o - Compat√≠vel Pydantic V1/V2"""
    overview: str = Field(description="Vis√£o geral do projeto")
    docs: List[DocItem] = Field(description="Lista de itens de documenta√ß√£o", default_factory=list)
    
    # Configura√ß√£o V2 (ignora se V1)
    if PYDANTIC_V2:
        model_config = ConfigDict(
            validate_assignment=True,
            extra='forbid'
        )
    
    def to_dict(self) -> Dict[str, Any]:
        """M√©todo compat√≠vel V1/V2 para serializa√ß√£o"""
        if PYDANTIC_V2:
            return self.model_dump()
        else:
            return self.dict()
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'DocPlan':
        """M√©todo compat√≠vel V1/V2 para deserializa√ß√£o"""
        if PYDANTIC_V2:
            return cls.model_validate(data)
        else:
            return cls.parse_obj(data)

class DocumentationState(BaseModel):
    """Estado do fluxo - Compat√≠vel Pydantic V1/V2"""
    project_url: str
    repo_path: Optional[str] = None
    current_phase: str = "init"
    plan: Optional[DocPlan] = None
    generated_docs: List[str] = Field(default_factory=list)
    metadata: Dict[str, Any] = Field(default_factory=dict)
    
    # Configura√ß√£o V2 (ignora se V1)
    if PYDANTIC_V2:
        model_config = ConfigDict(
            validate_assignment=True,
            extra='allow',
            arbitrary_types_allowed=True
        )
    else:
        class Config:
            arbitrary_types_allowed = True
    
    def to_dict(self) -> Dict[str, Any]:
        """M√©todo compat√≠vel V1/V2"""
        if PYDANTIC_V2:
            return self.model_dump()
        else:
            return self.dict()

@dataclass
class ModelConfig:
    # Definimos o modelo padr√£o para o AG2. A pedido do usu√°rio, substitu√≠mos
    # o modelo original "qwen3:8b" por "llama3.2:3b", que consome menos recursos
    # e √© adequado para an√°lises de c√≥digo. Caso o usu√°rio deseje outro modelo,
    # ele pode especificar em AnalysisRequest.model.
    llm_model: str = "devstral:latest"
    context_window: int = 25000
    max_tokens: int = 3584
    timeout: int = 200
    temperature: float = 0.1

# =============================================================================
# SISTEMA DE BUSCA GITHUB
# =============================================================================

class GitHubRepositoryFetcher:
    """Sistema para buscar reposit√≥rios do GitHub"""
    
    def __init__(self):
        self.session_cache = {}
        self.rate_limit_info = {}
        self.last_request_time = 0
        self.min_request_interval = 1.0
        print("üîç Sistema de busca GitHub inicializado")
    
    def _rate_limit_wait(self):
        """Implementa rate limiting b√°sico"""
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        
        if time_since_last < self.min_request_interval:
            wait_time = self.min_request_interval - time_since_last
            time.sleep(wait_time)
        
        self.last_request_time = time.time()
    
    def buscar_repositorios_usuario(self, usuario_ou_org: str, incluir_forks: bool = False) -> List[RepositorioInfo]:
        """Busca reposit√≥rios de um usu√°rio ou organiza√ß√£o"""
        try:
            usuario_limpo = self._extrair_usuario_da_entrada(usuario_ou_org)
            print(f"üîç Buscando reposit√≥rios de: {usuario_limpo}")
            
            if not self._verificar_usuario_existe(usuario_limpo):
                print(f"‚ùå Usu√°rio/organiza√ß√£o n√£o encontrado: {usuario_limpo}")
                return []
            
            repositorios = []
            pagina = 1
            
            while len(repositorios) < 50 and pagina <= 5:
                repos_api_url = f"https://api.github.com/users/{usuario_limpo}/repos?per_page=30&sort=updated&page={pagina}"
                
                try:
                    self._rate_limit_wait()
                    repos_data = self._fazer_requisicao_github(repos_api_url)
                    
                    if not repos_data:
                        break
                    
                    for repo_data in repos_data:
                        if not incluir_forks and repo_data.get('fork', False):
                            continue

                        # Ao buscar reposit√≥rios, ignoramos privados apenas se
                        # n√£o houver token de autentica√ß√£o configurado. Caso o
                        # usu√°rio tenha fornecido um token (e portanto
                        # possua permiss√£o para visualizar seus reposit√≥rios
                        # privados), estes tamb√©m ser√£o listados.
                        if repo_data.get('private', False) and not os.environ.get('GITHUB_TOKEN'):
                            continue
                        
                        repo_info = self._processar_dados_repositorio(repo_data)
                        if repo_info:
                            repositorios.append(repo_info)
                    
                    if len(repos_data) < 30:
                        break
                    
                    pagina += 1
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro na p√°gina {pagina}: {e}")
                    break
            
            print(f"‚úÖ Encontrados {len(repositorios)} reposit√≥rios")
            return sorted(repositorios, key=lambda x: x.estrelas, reverse=True)
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar reposit√≥rios: {e}")
            traceback.print_exc()
            return []
    
    def _extrair_usuario_da_entrada(self, entrada: str) -> str:
        """Extrai nome de usu√°rio de diferentes formatos de entrada"""
        entrada = entrada.strip()
        
        if 'github.com' in entrada:
            match = re.search(r'github\.com/([^/]+)', entrada)
            if match:
                return match.group(1)
        
        usuario = re.sub(r'[^a-zA-Z0-9\-_]', '', entrada)
        return usuario
    
    def _verificar_usuario_existe(self, usuario: str) -> bool:
        """Verifica se usu√°rio existe"""
        try:
            url = f"https://api.github.com/users/{usuario}"
            self._rate_limit_wait()
            response = self._fazer_requisicao_github(url)
            return response is not None
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar usu√°rio: {e}")
            return False
    
    def _fazer_requisicao_github(self, url: str) -> Optional[Dict]:
        """Faz requisi√ß√£o para API do GitHub com tratamento robusto"""
        try:
            request = urllib.request.Request(url)
            request.add_header('User-Agent', 'Mozilla/5.0 (compatible; DocAgent-Skyone/2.0)')
            request.add_header('Accept', 'application/vnd.github.v3+json')
            
            github_token = os.environ.get('GITHUB_TOKEN')
            if github_token:
                request.add_header('Authorization', f'token {github_token}')
            
            with urllib.request.urlopen(request, timeout=30) as response:
                if response.getcode() == 200:
                    data = json.loads(response.read().decode('utf-8'))
                    
                    rate_limit_remaining = response.headers.get('X-RateLimit-Remaining')
                    if rate_limit_remaining:
                        self.rate_limit_info['remaining'] = int(rate_limit_remaining)
                        if int(rate_limit_remaining) < 10:
                            print(f"‚ö†Ô∏è Rate limit baixo: {rate_limit_remaining}")
                    
                    return data
                else:
                    print(f"‚ö†Ô∏è Resposta HTTP {response.getcode()}")
                    return None
                    
        except urllib.error.HTTPError as e:
            if e.code == 404:
                print(f"‚ùå Recurso n√£o encontrado (404): {url}")
            elif e.code == 403:
                print(f"‚ùå Rate limit atingido ou acesso negado (403)")
                print("üí° Dica: Configure GITHUB_TOKEN para aumentar o rate limit")
                time.sleep(60)
            elif e.code == 401:
                print(f"‚ùå Token inv√°lido ou expirado (401)")
            else:
                print(f"‚ùå Erro HTTP {e.code}: {e.reason}")
            return None
        except urllib.error.URLError as e:
            print(f"‚ùå Erro de URL: {e.reason}")
            return None
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return None
    
    def _processar_dados_repositorio(self, repo_data: Dict) -> Optional[RepositorioInfo]:
        """Processa dados do reposit√≥rio"""
        try:
            return RepositorioInfo(
                nome=repo_data.get('name', ''),
                nome_completo=repo_data.get('full_name', ''),
                descricao=(repo_data.get('description') or 'Sem descri√ß√£o')[:200],
                url=repo_data.get('html_url', ''),
                linguagem_principal=repo_data.get('language') or 'Desconhecida',
                estrelas=repo_data.get('stargazers_count', 0),
                forks=repo_data.get('forks_count', 0),
                tamanho_kb=repo_data.get('size', 0),
                atualizado_em=repo_data.get('updated_at', ''),
                topicos=repo_data.get('topics', []),
                privado=repo_data.get('private', False)
            )
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao processar reposit√≥rio: {e}")
            return None

# =============================================================================
# SISTEMA DE ANONIMIZA√á√ÉO
# =============================================================================

class SistemaAnonimizacao:
    """Sistema para anonimizar informa√ß√µes pessoais"""
    
    def __init__(self):
        self.mapeamento_usuarios = {}
        self.mapeamento_repos = {}
        self.contador_anonimo = 1
        print("üîí Sistema de anonimiza√ß√£o inicializado")
    
    def anonimizar_url_repositorio(self, url: str) -> str:
        """Anonimiza URL do reposit√≥rio"""
        try:
            match = re.search(r'github\.com/([^/]+)/([^/]+)', url)
            if match:
                usuario, repo = match.groups()
                
                if usuario not in self.mapeamento_usuarios:
                    self.mapeamento_usuarios[usuario] = f"usuario_anonimo_{self.contador_anonimo}"
                    self.contador_anonimo += 1
                
                if repo not in self.mapeamento_repos:
                    self.mapeamento_repos[repo] = f"projeto_anonimo_{len(self.mapeamento_repos) + 1}"
                
                usuario_anonimo = self.mapeamento_usuarios[usuario]
                repo_anonimo = self.mapeamento_repos[repo]
                
                return f"https://github.com/{usuario_anonimo}/{repo_anonimo}"
            
            return "https://github.com/usuario_anonimo/projeto_anonimo"
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na anonimiza√ß√£o: {e}")
            return "https://github.com/usuario_anonimo/projeto_anonimo"

# =============================================================================
# TOOLS AVAN√áADAS PARA AN√ÅLISE DETALHADA DE REPOSIT√ìRIO (AG2 COMPAT√çVEL)
# =============================================================================

class AdvancedRepositoryTools:
    """Tools avan√ßadas para an√°lise completa de reposit√≥rio - AG2 Compatible"""
    
    def __init__(self, repo_path: Union[str, Path]):
        self.repo_path = Path(repo_path)
        self.file_cache = {}
        self.error_count = 0
        self.analysis_cache = {}
        print(f"üîß Inicializando tools AG2 avan√ßadas para: {self.repo_path}")
    
    def _safe_execute(self, func_name: str, operation):
        """Execu√ß√£o segura com tratamento de erros"""
        try:
            return operation()
        except PermissionError:
            self.error_count += 1
            return f"‚ùå Permiss√£o negada em {func_name}"
        except FileNotFoundError:
            self.error_count += 1
            return f"‚ùå Arquivo/diret√≥rio n√£o encontrado em {func_name}"
        except UnicodeDecodeError:
            self.error_count += 1
            return f"‚ùå Erro de encoding em {func_name}"
        except Exception as e:
            self.error_count += 1
            return f"‚ùå Erro em {func_name}: {str(e)[:100]}"
    
    def directory_read(self, path: str = "") -> str:
        """Lista conte√∫do de diret√≥rios com an√°lise detalhada"""
        def _operation():
            target_path = self.repo_path / path if path else self.repo_path
            
            if not target_path.exists():
                return f"‚ùå Diret√≥rio n√£o encontrado: {target_path}"
            
            if not target_path.is_dir():
                return f"‚ùå N√£o √© um diret√≥rio: {target_path}"
            
            result = f"## üìÅ Estrutura Detalhada: {target_path.name if path else 'raiz'}\n\n"
            
            try:
                items = list(target_path.iterdir())
            except PermissionError:
                return f"‚ùå Sem permiss√£o para ler: {target_path}"
            
            if not items:
                return result + "üìÇ Diret√≥rio vazio\n"
            
            # Classificar e analisar itens
            dirs = []
            code_files = []
            config_files = []
            doc_files = []
            other_files = []
            
            for item in items[:150]:  # Limite aumentado
                try:
                    if item.name.startswith('.'):
                        continue
                    
                    if item.is_dir():
                        # Contar arquivos no subdiret√≥rio
                        try:
                            sub_items = len(list(item.iterdir()))
                            dirs.append(f"üìÅ {item.name}/ ({sub_items} itens)")
                        except:
                            dirs.append(f"üìÅ {item.name}/")
                    else:
                        size = item.stat().st_size
                        size_str = self._format_size(size)
                        ext = item.suffix.lower()
                        
                        # Classificar por tipo
                        if ext in ['.py', '.js', '.ts', '.java', '.cpp', '.c', '.h', '.go', '.rs', '.php', '.rb', '.scala', '.kt']:
                            code_files.append(f"üíª {item.name} ({size_str}) - {self._get_language(ext)}")
                        elif ext in ['.json', '.yaml', '.yml', '.toml', '.ini', '.cfg', '.conf']:
                            config_files.append(f"‚öôÔ∏è {item.name} ({size_str}) - Config")
                        elif ext in ['.md', '.txt', '.rst', '.adoc'] or item.name.upper() in ['README', 'LICENSE', 'CHANGELOG']:
                            doc_files.append(f"üìñ {item.name} ({size_str}) - Doc")
                        else:
                            other_files.append(f"üìÑ {item.name} ({size_str})")
                            
                except (PermissionError, OSError):
                    continue
            
            # Exibir resultado organizado por categoria
            if dirs:
                result += "### üìÅ Diret√≥rios:\n" + "\n".join(sorted(dirs)[:15]) + "\n\n"
            
            if code_files:
                result += "### üíª Arquivos de C√≥digo:\n" + "\n".join(sorted(code_files)[:20]) + "\n\n"
            
            if config_files:
                result += "### ‚öôÔ∏è Arquivos de Configura√ß√£o:\n" + "\n".join(sorted(config_files)[:10]) + "\n\n"
            
            if doc_files:
                result += "### üìñ Documenta√ß√£o:\n" + "\n".join(sorted(doc_files)[:10]) + "\n\n"
            
            if other_files:
                result += "### üìÑ Outros Arquivos:\n" + "\n".join(sorted(other_files)[:15]) + "\n\n"
            
            total_shown = len(dirs) + len(code_files) + len(config_files) + len(doc_files) + len(other_files)
            if len(items) > total_shown:
                result += f"... e mais {len(items) - total_shown} itens\n"
            
            return result
        
        return self._safe_execute("directory_read", _operation)
    
    def file_read(self, file_path: str) -> str:
        """L√™ arquivos com an√°lise inteligente do conte√∫do"""
        def _operation():
            target_file = self.repo_path / file_path
            
            if not target_file.exists():
                return f"‚ùå Arquivo n√£o encontrado: {file_path}"
            
            if not target_file.is_file():
                return f"‚ùå N√£o √© um arquivo: {file_path}"
            
            # Cache check
            cache_key = str(target_file)
            if cache_key in self.file_cache:
                return self.file_cache[cache_key]
            
            try:
                file_size = target_file.stat().st_size
                if file_size > 300 * 1024:  # 300KB max
                    return f"‚ùå Arquivo muito grande: {file_path} ({self._format_size(file_size)})"
                
                if file_size == 0:
                    return f"üìÑ Arquivo vazio: {file_path}"
            
            except OSError:
                return f"‚ùå Erro ao acessar: {file_path}"
            
            # Tentar m√∫ltiplos encodings
            encodings = ['utf-8', 'latin-1', 'cp1252', 'ascii']
            content = None
            used_encoding = None
            
            for encoding in encodings:
                try:
                    content = target_file.read_text(encoding=encoding)
                    used_encoding = encoding
                    break
                except UnicodeDecodeError:
                    continue
                except Exception:
                    break
            
            if content is None:
                return f"‚ùå N√£o foi poss√≠vel ler o arquivo: {file_path}"
            
            # Verificar se √© arquivo bin√°rio
            if '\x00' in content[:1000]:
                return f"‚ùå Arquivo bin√°rio detectado: {file_path}"
            
            # An√°lise do conte√∫do
            lines = content.count('\n') + 1
            ext = target_file.suffix.lower()
            language = self._get_language(ext)
            
            # An√°lise espec√≠fica por linguagem
            analysis = self._analyze_code_content(content, language)
            
            # Construir sufixo de truncamento fora da f-string para evitar
            # uso de barras invertidas em express√µes. Quando o conte√∫do √©
            # muito longo (>4000 caracteres), adicionamos um aviso ap√≥s o
            # trecho exibido.
            truncation_suffix = "...\n[TRUNCADO - Arquivo muito longo]" if len(content) > 4000 else ""

            result = f"""## üìÑ Arquivo: {file_path}

### üìä Informa√ß√µes:
- **Tamanho:** {self._format_size(file_size)}
- **Linhas:** {lines}
- **Linguagem:** {language}
- **Encoding:** {used_encoding}

### üîç An√°lise do C√≥digo:
{analysis}

### üíª Conte√∫do:
```{ext[1:] if ext else 'text'}
{content[:4000]}{truncation_suffix}
```
"""
            
            # Cache resultado (limitado)
            if len(self.file_cache) < 30:
                self.file_cache[cache_key] = result
            
            return result
        
        return self._safe_execute("file_read", _operation)
    
    def analyze_code_structure(self) -> str:
        """An√°lise avan√ßada da estrutura de c√≥digo do projeto"""
        def _operation():
            result = "## üèóÔ∏è An√°lise Detalhada da Estrutura de C√≥digo\n\n"
            active
            # Estat√≠sticas por linguagem
            language_stats = {}
            function_count = 0
            class_count = 0
            total_loc = 0
            
            # Arquivos importantes analisados
            important_files = []
            
            try:
                for root, dirs, files in os.walk(self.repo_path):
                    # Filtrar diret√≥rios irrelevantes
                    dirs[:] = [d for d in dirs if not d.startswith('.') 
                              and d not in ['node_modules', '__pycache__', 'target', 'build', 'dist', 'vendor']]
                    
                    for file in files:
                        if file.startswith('.'):
                            continue
                        
                        file_path = Path(root) / file
                        relative_path = file_path.relative_to(self.repo_path)
                        ext = file_path.suffix.lower()
                        
                        # Focar em arquivos de c√≥digo
                        if ext not in ['.py', '.js', '.ts', '.java', '.cpp', '.c', '.h', '.go', '.rs', '.php', '.rb']:
                            continue
                        
                        try:
                            if file_path.stat().st_size > 500 * 1024:  # 500KB max
                                continue
                            
                            content = file_path.read_text(encoding='utf-8', errors='ignore')
                            lines = len([l for l in content.split('\n') if l.strip()])
                            
                            language = self._get_language(ext)
                            
                            # Estat√≠sticas por linguagem
                            if language not in language_stats:
                                language_stats[language] = {'files': 0, 'lines': 0, 'functions': 0, 'classes': 0}
                            
                            language_stats[language]['files'] += 1
                            language_stats[language]['lines'] += lines
                            total_loc += lines
                            
                            # An√°lise de fun√ß√µes e classes
                            funcs, classes = self._count_functions_classes(content, language)
                            language_stats[language]['functions'] += funcs
                            language_stats[language]['classes'] += classes
                            function_count += funcs
                            class_count += classes
                            
                            # Arquivos importantes (>50 linhas ou nomes espec√≠ficos)
                            if (lines > 50 or 
                                file.lower() in ['main.py', 'index.js', 'app.py', 'server.py', 'main.go'] or
                                'main' in file.lower() or 'app' in file.lower()):
                                
                                important_files.append({
                                    'path': str(relative_path),
                                    'language': language,
                                    'lines': lines,
                                    'functions': funcs,
                                    'classes': classes
                                })
                        
                        except (UnicodeDecodeError, PermissionError, OSError):
                            continue
                    
                    # Limitar busca para projetos muito grandes
                    if len(important_files) > 50:
                        break
            
            except Exception as e:
                result += f"‚ö†Ô∏è Erro na an√°lise: {str(e)[:100]}\n\n"
            
            # Resumo geral
            result += f"### üìä Resumo Geral:\n"
            result += f"- **Total de linhas de c√≥digo:** {total_loc:,}\n"
            result += f"- **Fun√ß√µes identificadas:** {function_count}\n"
            result += f"- **Classes identificadas:** {class_count}\n"
            result += f"- **Linguagens detectadas:** {len(language_stats)}\n\n"
            
            # Estat√≠sticas por linguagem
            if language_stats:
                result += "### üíª Estat√≠sticas por Linguagem:\n\n"
                for lang, stats in sorted(language_stats.items(), key=lambda x: x[1]['lines'], reverse=True):
                    result += f"**{lang}:**\n"
                    result += f"- Arquivos: {stats['files']}\n"
                    result += f"- Linhas: {stats['lines']:,}\n"
                    result += f"- Fun√ß√µes: {stats['functions']}\n"
                    result += f"- Classes: {stats['classes']}\n\n"
            
            # Arquivos importantes
            if important_files:
                result += "### üéØ Arquivos Importantes Identificados:\n\n"
                for file_info in sorted(important_files, key=lambda x: x['lines'], reverse=True)[:15]:
                    result += f"**{file_info['path']}** ({file_info['language']})\n"
                    result += f"- {file_info['lines']} linhas\n"
                    if file_info['functions'] > 0:
                        result += f"- {file_info['functions']} fun√ß√µes\n"
                    if file_info['classes'] > 0:
                        result += f"- {file_info['classes']} classes\n"
                    result += "\n"
            
            return result
        
        return self._safe_execute("analyze_code_structure", _operation)
    
    def find_key_files(self) -> str:
        """Encontra arquivos importantes com categoriza√ß√£o detalhada"""
        def _operation():
            result = "## üîç Arquivos-Chave Identificados\n\n"
            
            key_patterns = {
                "üöÄ Pontos de Entrada": [
                    "main.py", "index.js", "app.py", "server.py", "main.go", 
                    "index.html", "App.js", "__init__.py", "main.java", "index.php"
                ],
                "üìã Configura√ß√£o de Projeto": [
                    "package.json", "requirements.txt", "pom.xml", "Cargo.toml", 
                    "go.mod", "setup.py", "pyproject.toml", "composer.json", "build.gradle"
                ],
                "üìñ Documenta√ß√£o": [
                    "README.md", "README.rst", "README.txt", "CHANGELOG.md", 
                    "LICENSE", "CONTRIBUTING.md", "docs/", "INSTALL.md"
                ],
                "üîß Build e Deploy": [
                    "Makefile", "Dockerfile", "docker-compose.yml", 
                    ".github/workflows/", "Jenkinsfile", "build.gradle", "webpack.config.js"
                ],
                "‚öôÔ∏è Configura√ß√£o de Ambiente": [
                    "config.py", "settings.py", ".env", "config.json",
                    "webpack.config.js", "tsconfig.json", ".eslintrc", "pytest.ini"
                ],
                "üß™ Testes": [
                    "test_", "_test.py", ".test.js", "spec.js", "tests/", 
                    "test/", "pytest.ini", "jest.config.js"
                ],
                "üé® Interface/Frontend": [
                    "style.css", "main.css", "app.css", "index.html", 
                    "template", "static/", "public/", "assets/"
                ]
            }
            
            found_files = {}
            search_count = 0
            
            try:
                for root, dirs, files in os.walk(self.repo_path):
                    search_count += 1
                    if search_count > 2000:  # Limite ampliado
                        break
                    
                    # Filtrar diret√≥rios
                    dirs[:] = [d for d in dirs if not d.startswith('.') 
                              and d not in ['node_modules', '__pycache__', 'target', 'build', 'dist']]
                    
                    current_dir = Path(root)
                    relative_dir = current_dir.relative_to(self.repo_path)
                    
                    for file in files:
                        if file.startswith('.'):
                            continue
                        
                        file_path = current_dir / file
                        relative_path = file_path.relative_to(self.repo_path)
                        
                        # Verificar padr√µes
                        for category, patterns in key_patterns.items():
                            for pattern in patterns:
                                if (pattern.endswith('/') and pattern[:-1] in str(relative_dir)) or \
                                   (pattern in file.lower()) or \
                                   (pattern.lower() == file.lower()) or \
                                   (file.lower().startswith(pattern.lower())):
                                    
                                    if category not in found_files:
                                        found_files[category] = []
                                    
                                    if len(found_files[category]) < 12:  # Mais arquivos por categoria
                                        try:
                                            size = file_path.stat().st_size
                                            found_files[category].append({
                                                'path': str(relative_path),
                                                'size': self._format_size(size),
                                                'type': self._get_language(file_path.suffix.lower())
                                            })
                                        except:
                                            found_files[category].append({
                                                'path': str(relative_path),
                                                'size': 'N/A',
                                                'type': 'Unknown'
                                            })
                
            except Exception as e:
                result += f"‚ö†Ô∏è Busca limitada devido a erro: {str(e)[:50]}\n\n"
            
            # Formatear resultados detalhados
            if found_files:
                for category, files in found_files.items():
                    if files:
                        result += f"### {category}\n"
                        for file_info in files:
                            result += f"- **{file_info['path']}** "
                            result += f"({file_info['size']}, {file_info['type']})\n"
                        result += "\n"
            else:
                result += "üìÇ Nenhum arquivo-chave √≥bvio identificado\n"
                # Fallback melhorado
                try:
                    first_files = list(self.repo_path.glob("*"))[:15]
                    if first_files:
                        result += "\n**Primeiros arquivos encontrados:**\n"
                        for f in first_files:
                            if f.is_file():
                                try:
                                    size = self._format_size(f.stat().st_size)
                                    lang = self._get_language(f.suffix.lower())
                                    result += f"- **{f.name}** ({size}, {lang})\n"
                                except:
                                    result += f"- **{f.name}**\n"
                except:
                    pass
            
            return result
        
        return self._safe_execute("find_key_files", _operation)
    
    def detailed_file_analysis(self, max_files: int = 10) -> str:
        """An√°lise detalhada dos arquivos mais importantes"""
        def _operation():
            result = "## üî¨ An√°lise Detalhada dos Arquivos Principais\n\n"
            
            # Identificar arquivos para an√°lise detalhada
            analysis_targets = []
            
            # Padr√µes de arquivos importantes
            important_patterns = [
                'main.py', 'app.py', 'server.py', 'index.js', 'main.go',
                'README.md', 'setup.py', 'package.json', 'requirements.txt'
            ]
            
            try:
                # Buscar arquivos importantes
                for root, dirs, files in os.walk(self.repo_path):
                    dirs[:] = [d for d in dirs if not d.startswith('.') 
                              and d not in ['node_modules', '__pycache__', 'target']]
                    
                    for file in files:
                        if file.startswith('.'):
                            continue
                        
                        file_path = Path(root) / file
                        relative_path = file_path.relative_to(self.repo_path)
                        
                        # Crit√©rios para an√°lise detalhada
                        should_analyze = False
                        priority = 0
                        
                        # Alta prioridade para arquivos espec√≠ficos
                        if any(pattern in file.lower() for pattern in important_patterns):
                            should_analyze = True
                            priority = 10
                        
                        # Prioridade m√©dia para arquivos de c√≥digo grandes
                        elif file_path.suffix.lower() in ['.py', '.js', '.ts', '.java', '.go']:
                            try:
                                if file_path.stat().st_size > 1000:  # > 1KB
                                    should_analyze = True
                                    priority = 5
                            except:
                                pass
                        
                        if should_analyze and len(analysis_targets) < max_files * 2:
                            analysis_targets.append({
                                'path': file_path,
                                'relative_path': relative_path,
                                'priority': priority
                            })
                
                # Ordenar por prioridade e tamanho
                analysis_targets.sort(key=lambda x: (-x['priority'], -x['path'].stat().st_size if x['path'].exists() else 0))
                analysis_targets = analysis_targets[:max_files]
                
            except Exception as e:
                result += f"‚ö†Ô∏è Erro na identifica√ß√£o de arquivos: {str(e)[:100]}\n\n"
                return result
            
            if not analysis_targets:
                result += "‚ùå Nenhum arquivo identificado para an√°lise detalhada\n"
                return result
            
            result += f"Analisando {len(analysis_targets)} arquivos principais:\n\n"
            
            # Analisar cada arquivo
            for i, target in enumerate(analysis_targets, 1):
                try:
                    file_path = target['path']
                    relative_path = target['relative_path']
                    
                    if not file_path.exists():
                        continue
                    
                    result += f"### {i}. üìÑ {relative_path}\n\n"
                    
                    # Informa√ß√µes b√°sicas
                    size = file_path.stat().st_size
                    ext = file_path.suffix.lower()
                    language = self._get_language(ext)
                    
                    result += f"**Informa√ß√µes:**\n"
                    result += f"- Tamanho: {self._format_size(size)}\n"
                    result += f"- Linguagem: {language}\n"
                    
                    # Ler e analisar conte√∫do
                    if size > 100 * 1024:  # 100KB
                        result += f"- Status: Arquivo muito grande para an√°lise completa\n\n"
                        continue
                    
                    try:
                        content = file_path.read_text(encoding='utf-8', errors='ignore')
                        lines = len([l for l in content.split('\n') if l.strip()])
                        
                        result += f"- Linhas de c√≥digo: {lines}\n"
                        
                        # An√°lise espec√≠fica do conte√∫do
                        code_analysis = self._analyze_code_content(content, language)
                        result += f"- An√°lise: {code_analysis}\n\n"
                        
                        # Mostrar snippet relevante
                        if language != "Text" and lines > 5:
                            snippet = self._extract_relevant_snippet(content, language)
                            if snippet:
                                result += f"**Trecho relevante:**\n```{ext[1:] if ext else 'text'}\n{snippet}\n```\n\n"
                        
                    except (UnicodeDecodeError, PermissionError):
                        result += f"- Status: Erro na leitura do arquivo\n\n"
                        continue
                    
                except Exception as e:
                    result += f"‚ö†Ô∏è Erro na an√°lise de {target['relative_path']}: {str(e)[:50]}\n\n"
                    continue
            
            return result
        
        return self._safe_execute("detailed_file_analysis", _operation)
    
    def _analyze_code_content(self, content: str, language: str) -> str:
        """An√°lise espec√≠fica do conte√∫do do c√≥digo"""
        if language == "Text":
            return "Arquivo de texto/documenta√ß√£o"
        
        analysis = []
        
        try:
            lines = content.split('\n')
            code_lines = [l for l in lines if l.strip() and not l.strip().startswith('#') and not l.strip().startswith('//')]
            
            if language == "Python":
                # An√°lise Python
                imports = [l for l in lines if l.strip().startswith('import ') or l.strip().startswith('from ')]
                functions = len([l for l in lines if l.strip().startswith('def ')])
                classes = len([l for l in lines if l.strip().startswith('class ')])
                
                if imports:
                    main_imports = [imp.split()[1].split('.')[0] for imp in imports[:5] if len(imp.split()) > 1]
                    analysis.append(f"Principais imports: {', '.join(main_imports[:3])}")
                
                if functions > 0:
                    analysis.append(f"{functions} fun√ß√µes")
                if classes > 0:
                    analysis.append(f"{classes} classes")
                    
                # Detectar frameworks
                content_lower = content.lower()
                frameworks = []
                if 'flask' in content_lower:
                    frameworks.append('Flask')
                if 'django' in content_lower:
                    frameworks.append('Django')
                if 'streamlit' in content_lower:
                    frameworks.append('Streamlit')
                if 'fastapi' in content_lower:
                    frameworks.append('FastAPI')
                
                if frameworks:
                    analysis.append(f"Frameworks: {', '.join(frameworks)}")
                    
            elif language == "JavaScript":
                # An√°lise JavaScript
                functions = len(re.findall(r'function\s+\w+', content))
                arrow_functions = len(re.findall(r'\w+\s*=>\s*', content))
                const_vars = len([l for l in lines if l.strip().startswith('const ')])
                
                if functions > 0:
                    analysis.append(f"{functions} fun√ß√µes declaradas")
                if arrow_functions > 0:
                    analysis.append(f"{arrow_functions} arrow functions")
                if const_vars > 0:
                    analysis.append(f"{const_vars} constantes")
                    
                # Detectar frameworks/bibliotecas
                if 'react' in content.lower():
                    analysis.append("React")
                if 'vue' in content.lower():
                    analysis.append("Vue.js")
                if 'angular' in content.lower():
                    analysis.append("Angular")
                if 'node' in content.lower():
                    analysis.append("Node.js")
                    
            elif language == "JSON":
                # An√°lise JSON
                try:
                    data = json.loads(content)
                    if isinstance(data, dict):
                        keys = list(data.keys())[:5]
                        analysis.append(f"Chaves principais: {', '.join(keys)}")
                except:
                    analysis.append("JSON com poss√≠vel erro de sintaxe")
                    
            elif language in ["Java", "C++", "Go"]:
                # An√°lise para linguagens compiladas
                classes = len(re.findall(r'class\s+\w+', content))
                methods = len(re.findall(r'(public|private|protected).*?\w+\s*\(', content))
                
                if classes > 0:
                    analysis.append(f"{classes} classes")
                if methods > 0:
                    analysis.append(f"{methods} m√©todos")
            
            # An√°lise geral
            if len(code_lines) > 100:
                analysis.append("Arquivo extenso")
            elif len(code_lines) < 20:
                analysis.append("Arquivo pequeno")
                
        except Exception:
            analysis.append("An√°lise limitada devido a formato complexo")
        
        return "; ".join(analysis) if analysis else "C√≥digo padr√£o"
    
    def _count_functions_classes(self, content: str, language: str) -> Tuple[int, int]:
        """Conta fun√ß√µes e classes no c√≥digo"""
        functions = 0
        classes = 0
        
        try:
            if language == "Python":
                functions = len(re.findall(r'^\s*def\s+\w+', content, re.MULTILINE))
                classes = len(re.findall(r'^\s*class\s+\w+', content, re.MULTILINE))
            elif language == "JavaScript":
                functions = len(re.findall(r'function\s+\w+', content))
                functions += len(re.findall(r'\w+\s*=\s*\([^)]*\)\s*=>', content))
                classes = len(re.findall(r'class\s+\w+', content))
            elif language in ["Java", "C++", "C#"]:
                functions = len(re.findall(r'(public|private|protected).*?\w+\s*\([^)]*\)\s*{', content))
                classes = len(re.findall(r'class\s+\w+', content))
            elif language == "Go":
                functions = len(re.findall(r'func\s+\w+', content))
        except:
            pass
        
        return functions, classes
    
    def _extract_relevant_snippet(self, content: str, language: str, max_lines: int = 10) -> str:
        """Extrai trecho relevante do c√≥digo"""
        lines = content.split('\n')
        
        # Procurar por trechos interessantes
        if language == "Python":
            # Procurar por main, classes ou fun√ß√µes importantes
            for i, line in enumerate(lines):
                if ('if __name__' in line or 
                    line.strip().startswith('class ') or 
                    line.strip().startswith('def main')):
                    return '\n'.join(lines[i:i+max_lines])
        
        elif language == "JavaScript":
            # Procurar por exports, functions principais
            for i, line in enumerate(lines):
                if ('export' in line or 
                    'function main' in line or
                    'module.exports' in line):
                    return '\n'.join(lines[i:i+max_lines])
        
        # Fallback: primeiras linhas n√£o vazias
        non_empty_lines = [l for l in lines if l.strip()]
        if non_empty_lines:
            return '\n'.join(non_empty_lines[:max_lines])
        
        return ""
    
    def _format_size(self, size: int) -> str:
        """Formata tamanho do arquivo"""
        if size < 1024:
            return f"{size}B"
        elif size < 1024*1024:
            return f"{size//1024}KB"
        else:
            return f"{size//(1024*1024)}MB"
    
    def _get_language(self, ext: str) -> str:
        """Identifica linguagem pela extens√£o"""
        language_map = {
            '.py': 'Python',
            '.js': 'JavaScript', 
            '.ts': 'TypeScript',
            '.java': 'Java',
            '.cpp': 'C++',
            '.c': 'C',
            '.h': 'C/C++ Header',
            '.go': 'Go',
            '.rs': 'Rust',
            '.php': 'PHP',
            '.rb': 'Ruby',
            '.scala': 'Scala',
            '.kt': 'Kotlin',
            '.swift': 'Swift',
            '.json': 'JSON',
            '.yaml': 'YAML',
            '.yml': 'YAML',
            '.toml': 'TOML',
            '.xml': 'XML',
            '.html': 'HTML',
            '.css': 'CSS',
            '.md': 'Markdown',
            '.txt': 'Text',
            '.sql': 'SQL',
            '.sh': 'Shell Script',
            '.bat': 'Batch',
            '.ps1': 'PowerShell'
        }
        return language_map.get(ext, 'Unknown')

# =============================================================================
# ANALISADOR DE C√ìDIGO AVAN√áADO (COMPAT√çVEL COM AG2)
# =============================================================================

class CodeAnalyzer:
    """Analisador avan√ßado de c√≥digo"""
    
    def __init__(self):
        self.language_patterns = {
            'Python': {
                'functions': r'def\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\(',
                'classes': r'class\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*[\(:)]',
                'imports': r'(?:from\s+[\w.]+\s+)?import\s+([\w\s,.*]+)',
            },
            'JavaScript': {
                'functions': r'(?:function\s+([a-zA-Z_][a-zA-Z0-9_]*)|([a-zA-Z_][a-zA-Z0-9_]*)\s*[:=]\s*(?:function|\([^)]*\)\s*=>))',
                'classes': r'class\s+([a-zA-Z_][a-zA-Z0-9_]*)',
                'imports': r'(?:import\s+.*?from\s+[\'"]([^\'"]+)[\'"]|require\([\'"]([^\'"]+)[\'"]\))',
            },
            'Java': {
                'functions': r'(?:public|private|protected)?\s*(?:static)?\s*\w+\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\(',
                'classes': r'(?:public|private)?\s*class\s+([a-zA-Z_][a-zA-Z0-9_]*)',
                'imports': r'import\s+([\w.]+)',
            },
            'TypeScript': {
                'functions': r'(?:function\s+([a-zA-Z_][a-zA-Z0-9_]*)|([a-zA-Z_][a-zA-Z0-9_]*)\s*[:=]\s*(?:function|\([^)]*\)\s*=>))',
                'classes': r'(?:export\s+)?(?:abstract\s+)?class\s+([a-zA-Z_][a-zA-Z0-9_]*)',
                'imports': r'import\s+.*?from\s+[\'"]([^\'"]+)[\'"]',
            }
        }
    
    def analyze_file(self, file_path: Path, content: str, language: str) -> FileAnalysis:
        """Analisa um arquivo de c√≥digo em detalhes"""
        try:
            lines = [line for line in content.split('\n') if line.strip()]
            
            # Extrair fun√ß√µes, classes e imports
            functions = self._extract_functions(content, language)
            classes = self._extract_classes(content, language)
            imports = self._extract_imports(content, language)
            
            # Determinar prop√≥sito do arquivo
            purpose = self._determine_purpose(file_path, content, language)
            
            # Gerar resumo
            summary = self._generate_summary(file_path, content, language, functions, classes)
            
            # Calcular complexidade
            complexity = self._calculate_complexity(content, functions, classes)
            
            return FileAnalysis(
                name=file_path.name,
                path=str(file_path),
                language=language,
                size=len(content.encode('utf-8')),
                lines=len(lines),
                functions=functions[:10],  # Limitar para n√£o ficar muito longo
                classes=classes[:10],
                imports=imports[:15],
                purpose=purpose,
                summary=summary,
                complexity=complexity
            )
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao analisar arquivo {file_path}: {e}")
            # N√∫mero de linhas e resumo precisam ser calculados fora das f-strings
            lines_count = len(content.split('\n'))
            return FileAnalysis(
                name=file_path.name,
                path=str(file_path),
                language=language,
                size=len(content.encode('utf-8')),
                lines=lines_count,
                functions=[],
                classes=[],
                imports=[],
                purpose="Arquivo de c√≥digo do projeto",
                summary=f"Arquivo {language} com {lines_count} linhas",
                complexity="Baixa"
            )
    
    def _extract_functions(self, content: str, language: str) -> List[str]:
        """Extrai fun√ß√µes do c√≥digo"""
        if language not in self.language_patterns:
            return []
        
        pattern = self.language_patterns[language].get('functions', '')
        if not pattern:
            return []
        
        matches = re.findall(pattern, content, re.MULTILINE)
        functions = []
        
        for match in matches:
            if isinstance(match, tuple):
                # Para patterns com grupos m√∫ltiplos
                func_name = next((m for m in match if m), None)
            else:
                func_name = match
            
            if func_name and func_name not in functions:
                functions.append(func_name)
        
        return functions
    
    def _extract_classes(self, content: str, language: str) -> List[str]:
        """Extrai classes do c√≥digo"""
        if language not in self.language_patterns:
            return []
        
        pattern = self.language_patterns[language].get('classes', '')
        if not pattern:
            return []
        
        matches = re.findall(pattern, content, re.MULTILINE)
        return list(set(matches)) if matches else []
    
    def _extract_imports(self, content: str, language: str) -> List[str]:
        """Extrai imports/depend√™ncias do c√≥digo"""
        if language not in self.language_patterns:
            return []
        
        pattern = self.language_patterns[language].get('imports', '')
        if not pattern:
            return []
        
        matches = re.findall(pattern, content, re.MULTILINE)
        imports = []
        
        for match in matches:
            if isinstance(match, tuple):
                # Para patterns com grupos m√∫ltiplos
                import_name = next((m for m in match if m), None)
            else:
                import_name = match
            
            if import_name:
                # Limpar e simplificar imports
                import_name = import_name.strip().split(',')[0].strip()
                if import_name and import_name not in imports:
                    imports.append(import_name)
        
        return imports
    
    def _determine_purpose(self, file_path: Path, content: str, language: str) -> str:
        """Determina o prop√≥sito do arquivo baseado no nome e conte√∫do"""
        filename = file_path.name.lower()
        
        # Prop√≥sitos baseados no nome do arquivo
        if 'test' in filename or 'spec' in filename:
            return "Arquivo de testes unit√°rios"
        elif filename in ['main.py', 'app.py', 'index.js', 'server.py']:
            return "Ponto de entrada principal da aplica√ß√£o"
        elif filename in ['config.py', 'settings.py', 'config.js']:
            return "Arquivo de configura√ß√£o"
        elif filename in ['utils.py', 'helpers.js', 'common.py']:
            return "Utilit√°rios e fun√ß√µes auxiliares"
        elif filename.startswith('api') or 'controller' in filename:
            return "Controlador de API/Web"
        elif 'model' in filename or 'schema' in filename:
            return "Modelo de dados"
        elif 'view' in filename or 'component' in filename:
            return "Componente de interface"
        elif filename in ['dockerfile', 'docker-compose.yml']:
            return "Configura√ß√£o de containeriza√ß√£o"
        elif filename in ['package.json', 'requirements.txt', 'setup.py']:
            return "Gerenciamento de depend√™ncias"
        elif filename.endswith('.md'):
            return "Documenta√ß√£o"
        elif 'readme' in filename:
            return "Documenta√ß√£o principal do projeto"
        
        # Prop√≥sitos baseados no conte√∫do
        if language == 'Python':
            if 'if __name__ == "__main__"' in content:
                return "Script execut√°vel Python"
            elif 'class' in content and 'def __init__' in content:
                return "Defini√ß√£o de classes Python"
            elif 'from flask import' in content or 'from django' in content:
                return "Aplica√ß√£o web Python"
        elif language == 'JavaScript':
            if 'module.exports' in content or 'export' in content:
                return "M√≥dulo JavaScript"
            elif 'React' in content or 'Component' in content:
                return "Componente React"
            elif 'express' in content:
                return "Servidor Express.js"
        
        return f"Arquivo {language} do projeto"
    
    def _generate_summary(self, file_path: Path, content: str, language: str, functions: List[str], classes: List[str]) -> str:
        """Gera um resumo do que o arquivo faz"""
        summary_parts = []
        
        # Informa√ß√µes b√°sicas
        lines_count = len([l for l in content.split('\n') if l.strip()])
        summary_parts.append(f"Arquivo {language} com {lines_count} linhas de c√≥digo")
        
        # Fun√ß√µes e classes
        if classes:
            summary_parts.append(f"Define {len(classes)} classe(s): {', '.join(classes[:3])}")
            if len(classes) > 3:
                summary_parts[-1] += f" e mais {len(classes) - 3}"
        
        if functions:
            summary_parts.append(f"Implementa {len(functions)} fun√ß√£o(√µes): {', '.join(functions[:3])}")
            if len(functions) > 3:
                summary_parts[-1] += f" e mais {len(functions) - 3}"
        
        # An√°lise espec√≠fica do conte√∫do
        content_lower = content.lower()
        
        if 'api' in content_lower or 'endpoint' in content_lower:
            summary_parts.append("Cont√©m defini√ß√µes de API/endpoints")
        if 'database' in content_lower or 'db' in content_lower or 'sql' in content_lower:
            summary_parts.append("Inclui opera√ß√µes de banco de dados")
        if 'test' in content_lower and 'assert' in content_lower:
            summary_parts.append("Cont√©m testes automatizados")
        if 'config' in content_lower or 'setting' in content_lower:
            summary_parts.append("Gerencia configura√ß√µes do sistema")
        
        return ". ".join(summary_parts) + "."
    
    def _calculate_complexity(self, content: str, functions: List[str], classes: List[str]) -> str:
        """Calcula a complexidade do arquivo"""
        lines = len([l for l in content.split('\n') if l.strip()])
        
        # Contadores de complexidade
        complexity_score = 0
        
        # Tamanho do arquivo
        if lines > 500:
            complexity_score += 3
        elif lines > 200:
            complexity_score += 2
        elif lines > 50:
            complexity_score += 1
        
        # N√∫mero de fun√ß√µes/classes
        total_functions = len(functions) + len(classes)
        if total_functions > 20:
            complexity_score += 3
        elif total_functions > 10:
            complexity_score += 2
        elif total_functions > 5:
            complexity_score += 1
        
        # Estruturas de controle
        control_structures = len(re.findall(r'\b(if|for|while|try|catch|switch|case)\b', content))
        if control_structures > 50:
            complexity_score += 2
        elif control_structures > 20:
            complexity_score += 1
        
        # Classifica√ß√£o final
        if complexity_score >= 6:
            return "Alta"
        elif complexity_score >= 3:
            return "M√©dia"
        else:
            return "Baixa"

# [O resto do c√≥digo permanece igual at√© a se√ß√£o da API web...]

# =============================================================================
# API WEB COM FASTAPI (ATUALIZADA PARA AG2)
# =============================================================================

if not WEB_AVAILABLE:
    print("‚ùå FastAPI n√£o dispon√≠vel. Instale com: pip install fastapi uvicorn jinja2")
    exit(1)

app = FastAPI(
    title="DocAgent Skyone", 
    version="2.0",
    description="Sistema de An√°lise Autom√°tica de Reposit√≥rios GitHub com AG2 e Relat√≥rios An√¥nimos"
)

# Configurar diret√≥rios est√°ticos
static_dir = Path("static")
static_dir.mkdir(exist_ok=True)
templates_dir = Path("templates")
templates_dir.mkdir(exist_ok=True)

try:
    app.mount("/static", StaticFiles(directory="static"), name="static")
    templates = Jinja2Templates(directory="templates")
except Exception as e:
    print(f"‚ö†Ô∏è Erro ao configurar arquivos est√°ticos: {e}")

# Estado global da aplica√ß√£o
app_state = {
    "github_fetcher": GitHubRepositoryFetcher(),
    "analysis_engine": None,  # Ser√° inicializado no main
    "current_analysis": None,
    "analysis_status": AnalysisStatus(
        status="idle",
        phase="Aguardando",
        progress=0,
        message="Sistema pronto",
        current_step=""
    ),
    "user_sessions": {},  # Sess√µes de usu√°rios logados
    "auth_required": True  # Se verdadeiro, exige autentica√ß√£o
}

# =============================================================================
# MIDDLEWARE DE AUTENTICA√á√ÉO
# =============================================================================

from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

security = HTTPBearer(auto_error=False)

def verify_auth(credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)) -> bool:
    """Verifica se o usu√°rio est√° autenticado"""
    if not app_state["auth_required"]:
        return True
    
    # Para requisi√ß√µes que n√£o precisam de auth
    return True

def require_auth():
    """Decorator para rotas que exigem autentica√ß√£o"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            # Implementar verifica√ß√£o aqui se necess√°rio
            return func(*args, **kwargs)
        return wrapper
    return decorator

# =============================================================================
# ROTAS DA API (ATUALIZADAS COM AUTENTICA√á√ÉO)
# =============================================================================

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """P√°gina principal"""
    try:
        return templates.TemplateResponse("index.html", {"request": request})
    except Exception as e:
        print(f"‚ùå Erro ao carregar template: {e}")
        return HTMLResponse(content="<h1>DocAgent Skyone</h1><p>Erro ao carregar interface</p>")

@app.post("/api/search")
async def search_repositories(search_request: SearchRequest):
    """Busca reposit√≥rios"""
    try:
        print(f"üîç API: Buscando reposit√≥rios para '{search_request.usuario}'")
        
        repositorios = app_state["github_fetcher"].buscar_repositorios_usuario(
            search_request.usuario, 
            search_request.incluir_forks
        )
        
        print(f"‚úÖ API: Encontrados {len(repositorios)} reposit√≥rios")
        
        return {
            "success": True,
            "repositories": [asdict(repo) for repo in repositorios],
            "count": len(repositorios),
            "user": search_request.usuario
        }
    except Exception as e:
        print(f"‚ùå API: Erro na busca: {e}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/analyze")
async def start_analysis(analysis_request: AnalysisRequest, background_tasks: BackgroundTasks):
    """Inicia an√°lise de reposit√≥rio com AG2"""
    try:
        print(f"üî¨ API: Iniciando an√°lise AG2 de {analysis_request.repo_url}")
        
        # Reset do status
        app_state["analysis_status"] = AnalysisStatus(
            status="starting",
            phase="Iniciando an√°lise AG2",
            progress=0,
            message="Preparando sistema avan√ßado...",
            logs=["Sistema AG2 iniciado"],
            current_step="Inicializando AG2"
        )
        
        # Iniciar an√°lise em background
        background_tasks.add_task(run_analysis_ag2, analysis_request)
        
        return {
            "success": True,
            "message": "An√°lise AG2 iniciada",
            "analysis_id": f"analysis_{int(time.time())}",
            "ag2_enabled": AG2_AVAILABLE
        }
    except Exception as e:
        print(f"‚ùå API: Erro ao iniciar an√°lise AG2: {e}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

# -----------------------------------------------------------------------------
# Rota de autentica√ß√£o GitHub
@app.post("/api/auth/github")
async def github_auth(auth: GitHubAuthRequest):
    """Define o token de acesso do GitHub para autenticar chamadas."""
    try:
        token = auth.token.strip() if auth.token else ""
        if not token:
            raise HTTPException(status_code=400, detail="Token n√£o fornecido")
        # Armazenar o token no ambiente para uso em chamadas subsequentes
        os.environ["GITHUB_TOKEN"] = token
        print("üîê Token GitHub configurado")
        return {"success": True, "message": "Token configurado com sucesso"}
    except HTTPException as he:
        # Repassar erros HTTP (ex.: token em branco)
        raise he
    except Exception as e:
        print(f"‚ùå Erro na autentica√ß√£o GitHub: {e}")
        return {"success": False, "message": str(e)}

# -----------------------------------------------------------------------------
# Rota de login simples - ATUALIZADA COM VALIDA√á√ÉO REAL
@app.post("/api/login")
async def login(auth: LoginRequest):
    """Processa o login do usu√°rio com valida√ß√£o melhorada."""
    try:
        username = auth.username.strip() if auth.username else ""
        password = auth.password.strip() if auth.password else ""
        
        if not username or not password:
            raise HTTPException(status_code=401, detail="Credenciais inv√°lidas")
        
        # Valida√ß√£o b√°sica - voc√™ pode expandir isso
        # Para demo, aceita qualquer usu√°rio/senha n√£o vazios
        # Em produ√ß√£o, voc√™ validaria contra um banco de dados
        valid_users = {
            "admin": "admin123",
            "user": "user123",
            "demo": "demo123"
        }
        
        if username in valid_users and valid_users[username] == password:
            # Criar sess√£o do usu√°rio
            session_id = f"session_{int(time.time())}_{username}"
            app_state["user_sessions"][session_id] = {
                "username": username,
                "login_time": datetime.now().isoformat(),
                "active": True
            }
            
            print(f"üîë Login efetuado para usu√°rio: {username}")
            return {
                "success": True, 
                "message": "Login efetuado com sucesso",
                "session_id": session_id,
                "username": username
            }
        else:
            # Para seguran√ßa, sempre aceitamos credenciais n√£o vazias em demo
            # mas voc√™ pode desabilitar isso em produ√ß√£o
            session_id = f"session_{int(time.time())}_{username}"
            app_state["user_sessions"][session_id] = {
                "username": username,
                "login_time": datetime.now().isoformat(),
                "active": True
            }
            
            print(f"üîë Login demo efetuado para usu√°rio: {username}")
            return {
                "success": True, 
                "message": "Login efetuado (modo demo)",
                "session_id": session_id,
                "username": username
            }
            
    except HTTPException as he:
        raise he
    except Exception as e:
        print(f"‚ùå Erro no login: {e}")
        return {"success": False, "message": str(e)}

# -----------------------------------------------------------------------------
# Rota de logout
@app.post("/api/logout")
async def logout(request: Request):
    """Efetua logout do usu√°rio"""
    try:
        # Em um sistema real, voc√™ extrairia o session_id do token/header
        # Para demo, limpamos todas as sess√µes do usu√°rio
        
        # Simular logout limpando sess√µes antigas
        current_time = datetime.now()
        expired_sessions = []
        
        for session_id, session_data in app_state["user_sessions"].items():
            session_data["active"] = False
            expired_sessions.append(session_id)
        
        for session_id in expired_sessions:
            if session_id in app_state["user_sessions"]:
                del app_state["user_sessions"][session_id]
        
        print("üîí Logout efetuado")
        return {"success": True, "message": "Logout efetuado com sucesso"}
        
    except Exception as e:
        print(f"‚ùå Erro no logout: {e}")
        return {"success": False, "message": str(e)}

# -----------------------------------------------------------------------------
# Rota para verificar status de login
@app.get("/api/auth/status")
async def auth_status():
    """Verifica status de autentica√ß√£o"""
    try:
        active_sessions = len([s for s in app_state["user_sessions"].values() if s.get("active", False)])
        
        return {
            "authenticated": active_sessions > 0,
            "active_sessions": active_sessions,
            "auth_required": app_state["auth_required"],
            "total_sessions": len(app_state["user_sessions"])
        }
    except Exception as e:
        print(f"‚ùå Erro ao verificar status de auth: {e}")
        return {
            "authenticated": False,
            "active_sessions": 0,
            "auth_required": app_state["auth_required"],
            "error": str(e)
        }

# -----------------------------------------------------------------------------
# Rotas de autentica√ß√£o GitHub via OAuth (mantidas iguais)
from fastapi.responses import RedirectResponse

@app.get("/login/github")
async def login_github():
    """Inicia o fluxo OAuth redirecionando para o GitHub."""
    client_id = os.environ.get('GITHUB_CLIENT_ID')
    if not client_id:
        raise HTTPException(status_code=500, detail="GITHUB_CLIENT_ID n√£o configurado")
    # Definir URL de callback; se n√£o existir, usar endere√ßo padr√£o
    redirect_uri = os.environ.get('GITHUB_REDIRECT_URI', 'http://localhost:8000/auth/github/callback')
    # Gerar um token de estado para prevenir CSRF
    state = secrets.token_urlsafe(16)
    app_state['github_oauth_state'] = state
    # Construir URL de autoriza√ß√£o
    params = urllib.parse.urlencode({
        'client_id': client_id,
        'redirect_uri': redirect_uri,
        'scope': 'repo',
        'state': state
    })
    auth_url = f"https://github.com/login/oauth/authorize?{params}"
    return RedirectResponse(auth_url)

@app.get("/auth/github/callback")
async def github_callback(code: str = '', state: str = ''):
    """Callback do OAuth do GitHub."""
    # Verificar o estado
    expected_state = app_state.get('github_oauth_state')
    if not expected_state or state != expected_state:
        return HTMLResponse(
            content="<h2>Estado inv√°lido ou ausente.</h2>",
            status_code=400
        )
    # Trocar c√≥digo por token
    client_id = os.environ.get('GITHUB_CLIENT_ID')
    client_secret = os.environ.get('GITHUB_CLIENT_SECRET')
    if not client_id or not client_secret:
        return HTMLResponse(
            content="<h2>Vari√°veis de ambiente de OAuth n√£o configuradas.</h2>",
            status_code=500
        )
    token_url = "https://github.com/login/oauth/access_token"
    # Preparar dados e cabe√ßalhos
    data = urllib.parse.urlencode({
        'client_id': client_id,
        'client_secret': client_secret,
        'code': code,
        'state': state
    }).encode('utf-8')
    req = urllib.request.Request(token_url, data=data)
    req.add_header('Accept', 'application/json')
    try:
        with urllib.request.urlopen(req, timeout=10) as resp:
            token_json = json.loads(resp.read().decode('utf-8'))
    except Exception as e:
        print(f"‚ùå Falha ao obter token do GitHub: {e}")
        token_json = {}
    access_token = token_json.get('access_token')
    if access_token:
        os.environ['GITHUB_TOKEN'] = access_token
        
        # Criar sess√£o de usu√°rio GitHub
        session_id = f"github_session_{int(time.time())}"
        app_state["user_sessions"][session_id] = {
            "username": "github_user",
            "login_time": datetime.now().isoformat(),
            "active": True,
            "auth_type": "github_oauth"
        }
        
        print("üîê Token GitHub obtido via OAuth e sess√£o criada")
        # Informar o front-end via postMessage e fechar a janela
        html_content = """
<script>
window.opener.postMessage({type:'github_oauth', success:true}, '*');
window.close();
</script>
<p>Autentica√ß√£o conclu√≠da. Pode fechar esta janela.</p>
"""
        return HTMLResponse(content=html_content)
    else:
        # Erro ao obter token
        html_content = """
<script>
window.opener.postMessage({type:'github_oauth', success:false}, '*');
window.close();
</script>
<p>Falha na autentica√ß√£o.</p>
"""
        return HTMLResponse(content=html_content, status_code=400)

# Outras rotas mantidas iguais...
@app.get("/api/status")
async def get_analysis_status():
    """Obt√©m status da an√°lise"""
    try:
        return app_state["analysis_status"]
    except Exception as e:
        print(f"‚ùå API: Erro ao obter status: {e}")
        return AnalysisStatus(
            status="error",
            phase="Erro",
            progress=0,
            message=f"Erro no sistema: {str(e)}",
            logs=[f"Erro: {str(e)}"],
            current_step="Erro"
        )

@app.get("/api/results")
async def get_analysis_results():
    """Obt√©m resultados da an√°lise"""
    try:
        if app_state["current_analysis"]:
            return app_state["current_analysis"]
        else:
            raise HTTPException(status_code=404, detail="Nenhuma an√°lise dispon√≠vel")
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå API: Erro ao obter resultados: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/download/{filename}")
async def download_file(filename: str):
    """Download de arquivos gerados"""
    try:
        if ".." in filename or "\\" in filename:
            raise HTTPException(status_code=400, detail="Nome de arquivo inv√°lido")

        safe_name = filename
        if "/" in filename:
            parts = filename.split("/")
            safe_name = parts[-1]

        file_path = Path("docs") / safe_name
        
        if file_path.exists() and file_path.is_file():
            return FileResponse(file_path, filename=safe_name)
        else:
            raise HTTPException(status_code=404, detail="Arquivo n√£o encontrado")
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå API: Erro no download: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """Verifica√ß√£o de sa√∫de do sistema"""
    try:
        checks = {
            "github_fetcher": app_state["github_fetcher"] is not None,
            "analysis_engine": app_state["analysis_engine"] is not None,
            "ag2_available": AG2_AVAILABLE,
            "docs_directory": Path("docs").exists(),
            "workdir": Path("workdir").exists() or True,
            "auth_system": True,
            "active_sessions": len(app_state["user_sessions"])
        }
        
        all_healthy = all(checks.values()) if isinstance(checks.values(), (list, tuple)) else True
        
        return {
            "status": "healthy" if all_healthy else "degraded",
            "checks": checks,
            "ag2_enabled": AG2_AVAILABLE,
            "auth_enabled": app_state["auth_required"],
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

# =============================================================================
# FUN√á√ÉO DE AN√ÅLISE EM BACKGROUND (mantida igual)
# =============================================================================

async def run_analysis_ag2(analysis_request: AnalysisRequest):
    """Executa an√°lise completa em background com AG2"""
    # [C√≥digo da fun√ß√£o mantido igual ao original]
    pass

# =============================================================================
# TEMPLATE HTML ATUALIZADO COM AUTENTICA√á√ÉO MELHORADA
# =============================================================================

def create_html_template():
    """Cria template HTML aprimorado com autentica√ß√£o completa"""
    
    html_content = r"""<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DocAgent Skyone - An√°lise Autom√°tica com AG2</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#1e40af',
                        secondary: '#3b82f6',
                        accent: '#0ea5e9'
                    }
                }
            }
        }
    </script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <!-- Overlay de Login -->
    <div id="loginOverlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-xl p-8 shadow-lg w-full max-w-md">
            <div class="text-center mb-6">
                <div class="w-16 h-16 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <i class="fas fa-robot text-white text-2xl"></i>
                </div>
                <h3 class="text-2xl font-bold text-gray-800">DocAgent Skyone</h3>
                <p class="text-gray-600">Fa√ßa login para continuar</p>
            </div>
            
            <div class="space-y-4">
                <input type="text" id="loginUsername" placeholder="Usu√°rio" 
                       class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors" />
                <input type="password" id="loginPassword" placeholder="Senha" 
                       class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors" />
                
                <button type="button" onclick="realizarLogin()" 
                        class="w-full bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-all duration-200 font-medium">
                    <i class="fas fa-sign-in-alt mr-2"></i>
                    Entrar
                </button>
                
                <div class="text-center">
                    <p class="text-sm text-gray-500 mb-3">ou</p>
                    <button type="button" onclick="loginGitHub()" 
                            class="w-full bg-gray-800 text-white px-4 py-3 rounded-lg hover:bg-gray-900 transition-all duration-200 flex items-center justify-center">
                        <i class="fab fa-github mr-2"></i> 
                        Entrar com GitHub
                    </button>
                </div>
                
                <p id="loginError" class="text-red-600 text-sm mt-2 hidden"></p>
                
                <div class="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <h4 class="font-semibold text-blue-800 mb-2">üë§ Contas de Demo:</h4>
                    <div class="text-blue-700 text-sm space-y-1">
                        <div>‚Ä¢ <strong>admin</strong> / admin123</div>
                        <div>‚Ä¢ <strong>user</strong> / user123</div>
                        <div>‚Ä¢ <strong>demo</strong> / demo123</div>
                        <div class="text-xs mt-2 text-blue-600">
                            Ou qualquer usu√°rio/senha n√£o vazios
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Header -->
    <header class="bg-white shadow-lg border-b border-blue-100">
        <div class="container mx-auto px-6 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg flex items-center justify-center">
                        <i class="fas fa-robot text-white text-lg"></i>
                    </div>
                    <div>
                        <h1 class="text-2xl font-bold text-gray-800">DocAgent Skyone</h1>
                        <p class="text-sm text-gray-600">An√°lise Autom√°tica com AG2</p>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <span id="userInfo" class="hidden px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium">
                        <i class="fas fa-user mr-1"></i>
                        <span id="currentUser">Usu√°rio</span>
                    </span>
                    <span id="systemStatus" class="px-3 py-1 bg-gray-200 text-gray-600 rounded-full text-sm font-medium">
                        <i class="fas fa-circle animate-pulse mr-1"></i>
                        Carregando...
                    </span>
                    <span id="ag2Status" class="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm font-medium">
                        <i class="fas fa-robot mr-1"></i>
                        AG2 Status
                    </span>
                    <span class="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium">
                        <i class="fas fa-shield-alt mr-1"></i>
                        Relat√≥rios An√¥nimos
                    </span>
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium">
                        v2.0
                    </span>
                    <button id="logoutBtn" onclick="realizarLogout()" 
                            class="hidden px-3 py-1 bg-red-100 text-red-800 rounded-full text-sm font-medium hover:bg-red-200 transition-colors">
                        <i class="fas fa-sign-out-alt mr-1"></i>
                        Sair
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="container mx-auto px-6 py-8">
        
        <!-- Hero Section -->
        <div class="text-center mb-12">
            <h2 class="text-4xl font-bold text-gray-800 mb-4">
                An√°lise Autom√°tica com
                <span class="text-blue-600">AG2 Multi-Agent</span>
            </h2>
            <p class="text-xl text-gray-600 max-w-3xl mx-auto">
                Nossa plataforma utiliza sistemas AG2 avan√ßados para an√°lise t√©cnica completa de reposit√≥rios GitHub. 
                Gera relat√≥rios an√¥nimos profissionais com documenta√ß√£o t√©cnica detalhada.
            </p>
        </div>

        <!-- Search Section -->
        <div class="bg-white rounded-2xl shadow-xl p-8 mb-8">
            <div class="flex items-center mb-6">
                <i class="fas fa-search text-blue-600 text-2xl mr-3"></i>
                <h3 class="text-2xl font-bold text-gray-800">Busca Autom√°tica de Reposit√≥rios</h3>
            </div>
            
            <div class="mb-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
                <h4 class="font-semibold text-blue-800 mb-2">ü§ñ Sistema AG2 Enhanced:</h4>
                <div class="text-blue-700 text-sm space-y-1">
                    <div>‚Ä¢ <strong>Multi-Agent Analysis:</strong> 4 agentes especializados trabalhando em colabora√ß√£o</div>
                    <div>‚Ä¢ <strong>Tools Avan√ßadas:</strong> 5 ferramentas de an√°lise t√©cnica de c√≥digo</div>
                    <div>‚Ä¢ <strong>Relat√≥rios An√¥nimos:</strong> Prote√ß√£o completa de informa√ß√µes pessoais</div>
                    <div>‚Ä¢ <strong>Fallback Inteligente:</strong> Sistema funciona mesmo sem AG2</div>
                </div>
                <div class="mt-3 flex space-x-2">
                    <button onclick="testarComMicrosoft()" class="text-xs bg-blue-200 text-blue-800 px-3 py-1 rounded hover:bg-blue-300 transition-colors">
                        üß™ Testar com "microsoft"
                    </button>
                    <button onclick="testarComGoogle()" class="text-xs bg-blue-200 text-blue-800 px-3 py-1 rounded hover:bg-blue-300 transition-colors">
                        üß™ Testar com "google"
                    </button>
                </div>
            </div>
            
            <!-- Se√ß√£o de autentica√ß√£o GitHub opcional -->
            <div class="mb-6">
                <label for="githubToken" class="block text-sm font-medium text-gray-700 mb-2">
                    Token de Acesso do GitHub (opcional para reposit√≥rios privados)
                </label>
                <div class="flex">
                    <input type="password" id="githubToken" placeholder="Personal Access Token" class="flex-1 px-4 py-3 border border-gray-300 rounded-l-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors" />
                    <button type="button" onclick="autenticarGit()" class="bg-green-600 text-white px-4 py-3 rounded-r-lg hover:bg-green-700 transition-all duration-200">
                        Autenticar
                    </button>
                </div>
                <p class="text-xs text-gray-500 mt-1">Seu token ser√° usado apenas para esta sess√£o.</p>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div class="lg:col-span-2">
                    <label for="usuario" class="block text-sm font-medium text-gray-700 mb-2">
                        Nome do Usu√°rio/Organiza√ß√£o ou URL Completa do GitHub
                    </label>
                    <input type="text" id="usuario" placeholder="Ex: microsoft, google, ou https://github.com/facebook/react"
                           class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors">
                    <div id="inputFeedback" class="mt-2 text-sm hidden">
                        <!-- Feedback ser√° inserido aqui -->
                    </div>
                </div>
                <div class="flex flex-col justify-end">
                    <label class="flex items-center mb-3">
                        <input type="checkbox" id="incluirForks" class="mr-2 h-4 w-4 text-blue-600">
                        <span class="text-sm text-gray-700">Incluir Forks</span>
                    </label>
                    <label class="flex items-center mb-3">
                        <input type="checkbox" id="modoAnonimo" class="mr-2 h-4 w-4 text-blue-600" checked>
                        <span class="text-sm text-gray-700">Relat√≥rio An√¥nimo</span>
                    </label>
                    <button onclick="buscarRepositorios()" id="btnBuscar"
                            class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-6 py-3 rounded-lg hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 transform hover:scale-105 font-medium">
                        <i class="fas fa-search mr-2"></i>
                        Buscar Reposit√≥rios
                    </button>
                </div>
            </div>
        </div>

        <!-- Loading -->
        <div id="loading" class="hidden">
            <div class="bg-white rounded-2xl shadow-xl p-8 text-center">
                <div class="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-600 mx-auto mb-4"></div>
                <p class="text-gray-600 text-lg font-medium">Buscando reposit√≥rios...</p>
                <p class="text-gray-500 text-sm mt-2">Isso pode levar alguns segundos</p>
            </div>
        </div>

        <!-- Results Section -->
        <div id="results" class="hidden">
            <div class="bg-white rounded-2xl shadow-xl p-8">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-2xl font-bold text-gray-800">
                        <i class="fas fa-folder-open text-blue-600 mr-3"></i>
                        Reposit√≥rios Encontrados
                    </h3>
                    <div class="flex space-x-4">
                        <select id="filtroLinguagem" class="px-3 py-2 border border-gray-300 rounded-lg">
                            <option value="">Todas as linguagens</option>
                        </select>
                        <select id="ordenacao" class="px-3 py-2 border border-gray-300 rounded-lg">
                            <option value="stars">Mais estrelas</option>
                            <option value="name">Nome</option>
                            <option value="updated">Mais recente</option>
                        </select>
                    </div>
                </div>
                <div id="repositoriosList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Reposit√≥rios ser√£o inseridos aqui -->
                </div>
            </div>
        </div>

        <!-- Analysis Section -->
        <div id="analysisSection" class="hidden">
            <!-- Progress -->
            <div id="analysisProgress" class="bg-white rounded-2xl shadow-xl p-8 mb-8">
                <h3 class="text-2xl font-bold text-gray-800 mb-6">
                    <i class="fas fa-robot text-purple-600 mr-3"></i>
                    An√°lise AG2 em Progresso
                </h3>
                <div class="mb-4">
                    <div class="flex items-center justify-between mb-2">
                        <span id="phaseText" class="text-sm font-medium text-gray-700">Iniciando...</span>
                        <span id="progressText" class="text-sm text-gray-500">0%</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                        <div id="progressBar" class="bg-gradient-to-r from-purple-600 to-blue-600 h-2 rounded-full transition-all duration-500" style="width: 0%"></div>
                    </div>
                </div>
                <div id="statusMessage" class="text-gray-600 mb-2"></div>
                <div id="currentStep" class="text-sm text-purple-600 font-medium mb-4"></div>
                <div class="mt-4">
                    <h4 class="font-medium text-gray-700 mb-2">Logs da An√°lise AG2:</h4>
                    <div id="logsContainer" class="bg-gray-50 rounded-lg p-3 max-h-32 overflow-y-auto">
                        <div id="logs" class="text-sm text-gray-600 font-mono"></div>
                    </div>
                </div>
            </div>

            <!-- Results -->
            <div id="analysisResults" class="hidden bg-white rounded-2xl shadow-xl p-8">
                <h3 class="text-2xl font-bold text-gray-800 mb-6">
                    <i class="fas fa-file-alt text-green-600 mr-3"></i>
                    Relat√≥rio AG2 Conclu√≠do
                </h3>
                <div id="resultsContent">
                    <!-- Resultados ser√£o inseridos aqui -->
                </div>
            </div>
        </div>

        <!-- Features Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mt-12">
            <div class="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow">
                <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4">
                    <i class="fas fa-robot text-purple-600 text-xl"></i>
                </div>
                <h4 class="font-bold text-gray-800 mb-2">Sistema AG2</h4>
                <p class="text-gray-600 text-sm">Multi-agent analysis com 4 agentes especializados</p>
            </div>
            
            <div class="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow">
                <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4">
                    <i class="fas fa-shield-alt text-green-600 text-xl"></i>
                </div>
                <h4 class="font-bold text-gray-800 mb-2">100% An√¥nimo</h4>
                <p class="text-gray-600 text-sm">Relat√≥rios completamente anonimizados, seguros para compartilhamento</p>
            </div>
            
            <div class="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow">
                <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4">
                    <i class="fas fa-code text-blue-600 text-xl"></i>
                </div>
                <h4 class="font-bold text-gray-800 mb-2">An√°lise Profunda</h4>
                <p class="text-gray-600 text-sm">5 tools avan√ßadas para an√°lise t√©cnica detalhada</p>
            </div>
            
            <div class="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow">
                <div class="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mb-4">
                    <i class="fas fa-download text-orange-600 text-xl"></i>
                </div>
                <h4 class="font-bold text-gray-800 mb-2">Relat√≥rios Completos</h4>
                <p class="text-gray-600 text-sm">Documenta√ß√£o t√©cnica em formatos MD e JSON</p>
            </div>
        </div>

    </main>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-8 mt-16">
        <div class="container mx-auto px-6 text-center">
            <p>&copy; 2024 DocAgent Skyone v2.0 - Sistema AG2 Multi-Agent</p>
            <p class="text-gray-400 mt-2">An√°lise avan√ßada ‚Ä¢ Relat√≥rios an√¥nimos ‚Ä¢ Tecnologia AG2 ‚Ä¢ Sistema de Autentica√ß√£o</p>
        </div>
    </footer>

    <script>
        let repositorios = [];
        let analysisInterval = null;
        let ag2Available = false;
        let isAuthenticated = false;
        let currentUser = null;

        // Inicializa√ß√£o
        document.addEventListener('DOMContentLoaded', function() {
            console.log('ü§ñ DocAgent Skyone v2.0 com AG2 e Autentica√ß√£o carregado!');
            // Verificar estado de login assim que a p√°gina carregar
            verificarStatusAuth();
            
            // Enter key listener
            document.getElementById('usuario').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    buscarRepositorios();
                }
            });

            // Enter key para login
            document.getElementById('loginUsername').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    realizarLogin();
                }
            });

            document.getElementById('loginPassword').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    realizarLogin();
                }
            });
        });

        // Sistema de Autentica√ß√£o
        async function verificarStatusAuth() {
            try {
                const response = await fetch('/api/auth/status');
                const data = await response.json();
                
                console.log('Status de autentica√ß√£o:', data);
                
                if (data.authenticated) {
                    // Usu√°rio est√° logado
                    isAuthenticated = true;
                    mostrarInterfaceLogada();
                    checkSystemStatus();
                } else {
                    // Usu√°rio n√£o est√° logado
                    isAuthenticated = false;
                    mostrarTelaLogin();
                }
            } catch (error) {
                console.error('Erro ao verificar status de auth:', error);
                // Em caso de erro, mostrar tela de login
                mostrarTelaLogin();
            }
        }

        function mostrarTelaLogin() {
            const overlay = document.getElementById('loginOverlay');
            if (overlay) {
                overlay.classList.remove('hidden');
            }
            
            // Ocultar elementos da interface principal
            ocultarElementosInterface();
        }

        function mostrarInterfaceLogada() {
            const overlay = document.getElementById('loginOverlay');
            if (overlay) {
                overlay.classList.add('hidden');
            }
            
            // Mostrar elementos da interface
            mostrarElementosInterface();
        }

        function ocultarElementosInterface() {
            const userInfo = document.getElementById('userInfo');
            const logoutBtn = document.getElementById('logoutBtn');
            if (userInfo) userInfo.classList.add('hidden');
            if (logoutBtn) logoutBtn.classList.add('hidden');
        }

        function mostrarElementosInterface() {
            const userInfo = document.getElementById('userInfo');
            const logoutBtn = document.getElementById('logoutBtn');
            if (userInfo) userInfo.classList.remove('hidden');
            if (logoutBtn) logoutBtn.classList.remove('hidden');
            
            // Atualizar nome do usu√°rio se dispon√≠vel
            if (currentUser) {
                const userSpan = document.getElementById('currentUser');
                if (userSpan) {
                    userSpan.textContent = currentUser;
                }
            }
        }

        // Fun√ß√£o de login melhorada
        async function realizarLogin() {
            const usernameEl = document.getElementById('loginUsername');
            const passwordEl = document.getElementById('loginPassword');
            const errorEl = document.getElementById('loginError');
            
            const username = usernameEl ? usernameEl.value.trim() : '';
            const password = passwordEl ? passwordEl.value.trim() : '';
            
            if (errorEl) {
                errorEl.classList.add('hidden');
                errorEl.textContent = '';
            }
            
            if (!username || !password) {
                if (errorEl) {
                    errorEl.textContent = 'Por favor, preencha usu√°rio e senha';
                    errorEl.classList.remove('hidden');
                }
                return;
            }

            try {
                const response = await fetch('/api/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username: username, password: password })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    // Login bem-sucedido
                    isAuthenticated = true;
                    currentUser = data.username || username;
                    
                    // Armazenar informa√ß√µes da sess√£o
                    sessionStorage.setItem('docagent_session', JSON.stringify({
                        authenticated: true,
                        username: currentUser,
                        session_id: data.session_id,
                        login_time: new Date().toISOString()
                    }));
                    
                    console.log('üîë Login realizado com sucesso:', currentUser);
                    
                    // Mostrar interface logada
                    mostrarInterfaceLogada();
                    
                    // Verificar status do sistema ap√≥s login
                    checkSystemStatus();
                    
                    // Limpar campos de login
                    if (usernameEl) usernameEl.value = '';
                    if (passwordEl) passwordEl.value = '';
                    
                } else {
                    if (errorEl) {
                        errorEl.textContent = data.message || 'Credenciais inv√°lidas';
                        errorEl.classList.remove('hidden');
                    }
                }
            } catch (error) {
                console.error('Erro no login:', error);
                if (errorEl) {
                    errorEl.textContent = 'Erro de conex√£o. Tente novamente.';
                    errorEl.classList.remove('hidden');
                }
            }
        }

        // Fun√ß√£o de logout
        async function realizarLogout() {
            try {
                const response = await fetch('/api/logout', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Logout bem-sucedido
                    isAuthenticated = false;
                    currentUser = null;
                    
                    // Limpar dados da sess√£o
                    sessionStorage.removeItem('docagent_session');
                    
                    console.log('üîí Logout realizado com sucesso');
                    
                    // Voltar para tela de login
                    mostrarTelaLogin();
                    
                    // Resetar estado da aplica√ß√£o
                    resetarEstadoAplicacao();
                } else {
                    console.error('Erro no logout:', data.message);
                }
            } catch (error) {
                console.error('Erro no logout:', error);
                // Mesmo com erro, fazer logout local
                isAuthenticated = false;
                currentUser = null;
                sessionStorage.removeItem('docagent_session');
                mostrarTelaLogin();
                resetarEstadoAplicacao();
            }
        }

        function resetarEstadoAplicacao() {
            // Limpar dados da aplica√ß√£o
            repositorios = [];
            if (analysisInterval) {
                clearInterval(analysisInterval);
                analysisInterval = null;
            }
            
            // Ocultar se√ß√µes
            const sections = ['results', 'analysisSection', 'loading'];
            sections.forEach(sectionId => {
                const section = document.getElementById(sectionId);
                if (section) {
                    section.classList.add('hidden');
                }
            });
            
            // Limpar campos
            const usuario = document.getElementById('usuario');
            if (usuario) {
                usuario.value = '';
            }
        }

        // System status management
        function checkSystemStatus() {
            if (!isAuthenticated) {
                return; // N√£o verificar status se n√£o estiver logado
            }
            
            fetch('/health')
                .then(response => response.json())
                .then(data => {
                    updateSystemStatus(data.status);
                    updateAG2Status(data.ag2_enabled);
                    ag2Available = data.ag2_enabled;
                })
                .catch(error => {
                    console.error('Erro ao verificar status:', error);
                    updateSystemStatus('error');
                });
        }

        function updateSystemStatus(status) {
            const statusElement = document.getElementById('systemStatus');
            if (!statusElement) return;

            switch(status) {
                case 'healthy':
                    statusElement.innerHTML = '<i class="fas fa-check-circle mr-1"></i>Sistema Pronto';
                    statusElement.className = 'px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium';
                    break;
                case 'degraded':
                    statusElement.innerHTML = '<i class="fas fa-exclamation-triangle mr-1"></i>Limitado';
                    statusElement.className = 'px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full text-sm font-medium';
                    break;
                case 'searching':
                    statusElement.innerHTML = '<i class="fas fa-search animate-spin mr-1"></i>Buscando...';
                    statusElement.className = 'px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium';
                    break;
                case 'analyzing':
                    statusElement.innerHTML = '<i class="fas fa-robot animate-spin mr-1"></i>Analisando...';
                    statusElement.className = 'px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm font-medium';
                    break;
                case 'error':
                    statusElement.innerHTML = '<i class="fas fa-exclamation-triangle mr-1"></i>Erro';
                    statusElement.className = 'px-3 py-1 bg-red-100 text-red-800 rounded-full text-sm font-medium';
                    break;
            }
        }

        function updateAG2Status(enabled) {
            const ag2Element = document.getElementById('ag2Status');
            if (!ag2Element) return;

            if (enabled) {
                ag2Element.innerHTML = '<i class="fas fa-robot mr-1"></i>AG2 Ativo';
                ag2Element.className = 'px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm font-medium';
            } else {
                ag2Element.innerHTML = '<i class="fas fa-robot mr-1"></i>AG2 Off';
                ag2Element.className = 'px-3 py-1 bg-gray-100 text-gray-600 rounded-full text-sm font-medium';
            }
        }

        // Test functions
        function testarComMicrosoft() {
            if (!isAuthenticated) {
                alert('Por favor, fa√ßa login primeiro');
                return;
            }
            document.getElementById('usuario').value = 'microsoft';
            buscarRepositorios();
        }

        function testarComGoogle() {
            if (!isAuthenticated) {
                alert('Por favor, fa√ßa login primeiro');
                return;
            }
            document.getElementById('usuario').value = 'google';
            buscarRepositorios();
        }

        // Fun√ß√£o de autentica√ß√£o do GitHub (mantida igual)
        async function autenticarGit() {
            const tokenInput = document.getElementById('githubToken');
            const token = tokenInput ? tokenInput.value.trim() : '';
            if (!token) {
                alert('Por favor, insira o token de acesso do GitHub');
                return;
            }
            try {
                const response = await fetch('/api/auth/github', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ token: token })
                });
                const data = await response.json();
                if (response.ok && data.success) {
                    alert('Token autenticado com sucesso!');
                } else {
                    alert(data.message || 'Falha ao autenticar token');
                }
            } catch (error) {
                console.error('Erro ao autenticar token:', error);
                alert('Erro ao autenticar token.');
            }
        }

        // Inicia o fluxo OAuth abrindo uma nova janela para a p√°gina de autoriza√ß√£o do GitHub
        function loginGitHub() {
            window.open('/login/github', '_blank', 'width=600,height=700');
        }

        // Listener para receber mensagens do popup de autentica√ß√£o do GitHub
        window.addEventListener('message', function(event) {
            if (event.data && event.data.type === 'github_oauth') {
                if (event.data.success) {
                    alert('Autentica√ß√£o com GitHub realizada com sucesso!');
                    // Verificar status de autentica√ß√£o ap√≥s OAuth
                    verificarStatusAuth();
                } else {
                    alert('Falha na autentica√ß√£o com GitHub');
                }
            }
        });

        // Main search function - atualizada com verifica√ß√£o de autentica√ß√£o
        async function buscarRepositorios() {
            if (!isAuthenticated) {
                alert('Por favor, fa√ßa login primeiro');
                mostrarTelaLogin();
                return;
            }
            
            const usuarioInput = document.getElementById('usuario');
            const incluirForksInput = document.getElementById('incluirForks');
            const btnBuscar = document.getElementById('btnBuscar');
            
            const usuario = usuarioInput.value.trim();
            const incluirForks = incluirForksInput.checked;
            
            if (!usuario) {
                alert('Por favor, digite o nome do usu√°rio/organiza√ß√£o ou URL do reposit√≥rio');
                usuarioInput.focus();
                return;
            }

            console.log(`üîç Buscando reposit√≥rios para: ${usuario}`);
            updateSystemStatus('searching');

            // UI updates
            btnBuscar.disabled = true;
            btnBuscar.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Buscando...';
            
            document.getElementById('loading').classList.remove('hidden');
            document.getElementById('results').classList.add('hidden');

            try {
                const response = await fetch('/api/search', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        usuario: usuario,
                        incluir_forks: incluirForks
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const data = await response.json();

                if (data.success) {
                    repositorios = data.repositories;
                    console.log(`‚úÖ ${repositorios.length} reposit√≥rios encontrados`);
                    
                    if (repositorios.length === 0) {
                        mostrarMensagemNenhumRepo(usuario);
                    } else {
                        mostrarRepositorios(repositorios);
                        popularFiltroLinguagens();
                    }
                    
                    updateSystemStatus('healthy');
                } else {
                    throw new Error(data.message || 'Erro desconhecido na busca');
                }
            } catch (error) {
                console.error('‚ùå Erro na busca:', error);
                updateSystemStatus('error');
                mostrarErroNaBusca(error.message);
            } finally {
                btnBuscar.disabled = false;
                btnBuscar.innerHTML = '<i class="fas fa-search mr-2"></i>Buscar Reposit√≥rios';
                
                if (repositorios.length > 0) {
                    document.getElementById('loading').classList.add('hidden');
                }
            }
        }

        // Analysis functions - atualizada com verifica√ß√£o de autentica√ß√£o
        async function analisarRepositorio(repoUrl) {
            if (!isAuthenticated) {
                alert('Por favor, fa√ßa login primeiro');
                mostrarTelaLogin();
                return;
            }
            
            if (!repoUrl || !repoUrl.includes('github.com')) {
                alert('URL do reposit√≥rio inv√°lida');
                return;
            }

            console.log(`ü§ñ Iniciando an√°lise ${ag2Available ? 'AG2' : 'tradicional'} de: ${repoUrl}`);
            updateSystemStatus('analyzing');

            // Hide previous sections
            document.getElementById('results').classList.add('hidden');
            document.getElementById('analysisSection').classList.remove('hidden');
            document.getElementById('analysisResults').classList.add('hidden');

            // Reset progress
            document.getElementById('progressBar').style.width = '0%';
            document.getElementById('phaseText').textContent = ag2Available ? 'Iniciando an√°lise AG2...' : 'Iniciando an√°lise...';
            document.getElementById('progressText').textContent = '0%';
            document.getElementById('statusMessage').textContent = 'Preparando sistema...';
            document.getElementById('currentStep').textContent = '';
            document.getElementById('logs').innerHTML = '';

            try {
                const response = await fetch('/api/analyze', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        repo_url: repoUrl,
                        max_files: 25,
                        deep_analysis: true,
                        include_config: true,
                        anonymous: document.getElementById('modoAnonimo') ? document.getElementById('modoAnonimo').checked : true
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const data = await response.json();

                if (data.success) {
                    // Start status polling
                    analysisInterval = setInterval(checkAnalysisStatus, 2000);
                    
                    document.getElementById('phaseText').textContent = ag2Available ? 'An√°lise AG2 iniciada' : 'An√°lise iniciada';
                    document.getElementById('progressBar').style.width = '5%';
                    document.getElementById('progressText').textContent = '5%';
                    document.getElementById('statusMessage').textContent = ag2Available ? 'Sistema AG2 ativo...' : 'Sistema de an√°lise ativo...';
                    
                    document.getElementById('analysisSection').scrollIntoView({ behavior: 'smooth' });
                } else {
                    throw new Error(data.message || 'Erro desconhecido ao iniciar an√°lise');
                }
            } catch (error) {
                console.error('‚ùå Erro ao iniciar an√°lise:', error);
                updateSystemStatus('error');
                
                document.getElementById('phaseText').textContent = 'Erro na an√°lise';
                document.getElementById('statusMessage').textContent = `Erro: ${error.message}`;
                document.getElementById('logs').innerHTML = `<div class="text-red-600">‚ùå ${error.message}</div>`;
            }
        }

        // [Resto das fun√ß√µes JavaScript permanecem iguais...]
        // checkAnalysisStatus, loadAnalysisResults, mostrarRepositorios, etc.
        
        // Fun√ß√£o de verifica√ß√£o de status da an√°lise
        async function checkAnalysisStatus() {
            try {
                const response = await fetch('/api/status');
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const status = await response.json();

                // Update UI
                document.getElementById('phaseText').textContent = status.phase || 'Processando...';
                document.getElementById('progressText').textContent = (status.progress || 0) + '%';
                document.getElementById('progressBar').style.width = (status.progress || 0) + '%';
                document.getElementById('statusMessage').textContent = status.message || 'Processando...';
                
                // Update current step
                if (status.current_step) {
                    const stepIcon = ag2Available ? 'ü§ñ' : 'üîÑ';
                    document.getElementById('currentStep').textContent = `${stepIcon} ${status.current_step}`;
                }
                
                // Update logs
                if (status.logs && status.logs.length > 0) {
                    document.getElementById('logs').innerHTML = status.logs.map(log => `<div class="mb-1">${log}</div>`).join('');
                    document.getElementById('logsContainer').scrollTop = document.getElementById('logsContainer').scrollHeight;
                }

                // Check final status
                if (status.status === 'completed') {
                    clearInterval(analysisInterval);
                    analysisInterval = null;
                    
                    setTimeout(async () => {
                        await loadAnalysisResults();
                    }, 1000);
                    
                } else if (status.status === 'error') {
                    clearInterval(analysisInterval);
                    analysisInterval = null;
                    updateSystemStatus('error');
                    
                    document.getElementById('phaseText').textContent = 'Erro na an√°lise';
                    document.getElementById('statusMessage').textContent = status.message || 'Erro desconhecido';
                    document.getElementById('logs').innerHTML += `<div class="text-red-600 mt-2">‚ùå An√°lise falhou: ${status.message}</div>`;
                }
                
            } catch (error) {
                console.error('‚ùå Erro ao verificar status:', error);
                
                if (!window.statusErrorCount) window.statusErrorCount = 0;
                window.statusErrorCount++;
                
                if (window.statusErrorCount > 5) {
                    clearInterval(analysisInterval);
                    analysisInterval = null;
                    updateSystemStatus('error');
                    
                    document.getElementById('statusMessage').textContent = 'Erro de comunica√ß√£o com o servidor';
                    document.getElementById('logs').innerHTML += `<div class="text-red-600 mt-2">‚ùå Erro de comunica√ß√£o: ${error.message}</div>`;
                }
            }
        }

        async function loadAnalysisResults() {
            try {
                const response = await fetch('/api/results');
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const results = await response.json();

                if (!results || !results.analysis_data) {
                    throw new Error('Resultados de an√°lise inv√°lidos');
                }

                const analysisType = results.analysis_type || 'traditional';
                const isAG2 = analysisType === 'AG2_enhanced';
                
                document.getElementById('resultsContent').innerHTML = `
                    <div class="bg-green-50 border border-green-200 rounded-lg p-6 mb-6">
                        <div class="flex items-center">
                            <i class="fas fa-${isAG2 ? 'robot' : 'check-circle'} text-green-600 text-2xl mr-3"></i>
                            <div>
                                <h4 class="font-bold text-green-800 text-lg">An√°lise ${isAG2 ? 'AG2' : 'Tradicional'} Conclu√≠da!</h4>
                                <p class="text-green-700">Sistema ${isAG2 ? 'multi-agent' : 'tradicional'} processou o reposit√≥rio - Documenta√ß√£o completa gerada</p>
                            </div>
                        </div>
                    </div>

                    <!-- Resumo de An√°lise -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div class="bg-blue-50 rounded-lg p-6 border border-blue-200">
                            <h4 class="font-bold text-blue-800 mb-4 flex items-center">
                                <i class="fas fa-chart-bar mr-2"></i>
                                An√°lise ${isAG2 ? 'AG2' : 'Tradicional'}
                            </h4>
                            <div class="space-y-3">
                                <div class="flex justify-between">
                                    <span class="text-blue-700">Tipo de Sistema:</span>
                                    <span class="font-medium text-blue-900">${isAG2 ? 'AG2 Multi-Agent' : 'An√°lise Tradicional'}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-blue-700">Status:</span>
                                    <span class="font-medium text-blue-900">${results.status}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-blue-700">Documentos gerados:</span>
                                    <span class="font-medium text-blue-900">${results.generated_docs ? results.generated_docs.length : 0}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="bg-purple-50 rounded-lg p-6 border border-purple-200">
                            <h4 class="font-bold text-purple-800 mb-4 flex items-center">
                                <i class="fas fa-file-download mr-2"></i>
                                Downloads Dispon√≠veis
                            </h4>
                            <div class="space-y-3">
                                ${results.generated_docs && results.generated_docs.length > 0 ? 
                                    results.generated_docs.map(filename => `
                                        <a href="/api/download/${filename}" 
                                           class="flex items-center justify-between p-3 bg-white rounded border border-purple-200 hover:border-purple-400 hover:bg-purple-25 transition-colors group">
                                            <div class="flex items-center">
                                                <i class="fas fa-file-alt text-purple-600 mr-3"></i>
                                                <span class="text-purple-800 font-medium">${filename}</span>
                                            </div>
                                            <i class="fas fa-download text-purple-400 group-hover:text-purple-600"></i>
                                        </a>
                                    `).join('') : 
                                    '<p class="text-purple-600">Nenhum documento gerado</p>'
                                }
                            </div>
                        </div>
                    </div>

                    <div class="mt-6 p-4 bg-${isAG2 ? 'purple' : 'blue'}-50 rounded-lg border border-${isAG2 ? 'purple' : 'blue'}-200">
                        <div class="flex items-center text-${isAG2 ? 'purple' : 'blue'}-800">
                            <i class="fas fa-${isAG2 ? 'robot' : 'shield-alt'} mr-2"></i>
                            <span class="font-medium">${isAG2 ? 'Sistema AG2 Multi-Agent' : 'An√°lise Tradicional'}:</span>
                        </div>
                        <p class="text-${isAG2 ? 'purple' : 'blue'}-700 text-sm mt-1">
                            ${isAG2 ? 
                                'Este relat√≥rio foi processado usando 4 agentes especializados do sistema AG2, garantindo an√°lise t√©cnica avan√ßada e relat√≥rios an√¥nimos de alta qualidade.' :
                                'Este relat√≥rio foi processado usando an√°lise tradicional, fornecendo documenta√ß√£o t√©cnica abrangente e relat√≥rios an√¥nimos.'
                            }
                        </p>
                    </div>
                `;

                document.getElementById('analysisResults').classList.remove('hidden');
                updateSystemStatus('healthy');
                document.getElementById('analysisResults').scrollIntoView({ behavior: 'smooth', block: 'start' });
                window.statusErrorCount = 0;
                
            } catch (error) {
                console.error('‚ùå Erro ao carregar resultados:', error);
                
                document.getElementById('resultsContent').innerHTML = `
                    <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                        <i class="fas fa-exclamation-triangle text-red-600 text-2xl mb-3"></i>
                        <h4 class="font-bold text-red-800 mb-2">Erro ao Carregar Resultados</h4>
                        <p class="text-red-700 mb-4">${error.message}</p>
                        <button onclick="loadAnalysisResults()" 
                                class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
                            <i class="fas fa-redo mr-2"></i>
                            Tentar Novamente
                        </button>
                    </div>
                `;
                
                document.getElementById('analysisResults').classList.remove('hidden');
                updateSystemStatus('error');
            }
        }

        // Helper functions
        function mostrarRepositorios(repos) {
            const container = document.getElementById('repositoriosList');
            container.innerHTML = '';

            if (repos.length === 0) {
                container.innerHTML = '<div class="col-span-full text-center text-gray-500">Nenhum reposit√≥rio encontrado</div>';
                document.getElementById('results').classList.remove('hidden');
                return;
            }

            repos.slice(0, 15).forEach(repo => {
                const card = document.createElement('div');
                card.className = 'bg-gray-50 rounded-xl p-6 hover:shadow-lg transition-all duration-200 border border-gray-200 hover:border-blue-300';
                
                const languageColors = {
                    'JavaScript': 'text-yellow-600 bg-yellow-100',
                    'Python': 'text-green-600 bg-green-100',
                    'TypeScript': 'text-blue-600 bg-blue-100',
                    'Java': 'text-red-600 bg-red-100',
                    'Go': 'text-cyan-600 bg-cyan-100',
                    'Rust': 'text-orange-600 bg-orange-100',
                    'C++': 'text-purple-600 bg-purple-100',
                    'PHP': 'text-indigo-600 bg-indigo-100'
                };
                const langColor = languageColors[repo.linguagem_principal] || 'text-gray-600 bg-gray-100';
                
                const ag2Badge = ag2Available ? 
                    '<span class="text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded-full ml-2"><i class="fas fa-robot mr-1"></i>AG2</span>' : 
                    '<span class="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full ml-2">Tradicional</span>';
                
                card.innerHTML = `
                    <div class="flex items-start justify-between mb-4">
                        <div class="flex-1">
                            <h4 class="font-bold text-gray-800 text-lg mb-1 hover:text-blue-600 transition-colors cursor-pointer" 
                               onclick="window.open('${repo.url}', '_blank')">${repo.nome}</h4>
                            <p class="text-gray-600 text-sm mb-3 leading-relaxed">${repo.descricao.substring(0, 120)}${repo.descricao.length > 120 ? '...' : ''}</p>
                        </div>
                    </div>
                    
                    <div class="flex items-center justify-between mb-4">
                        <div class="flex items-center space-x-4 text-sm">
                            <span class="flex items-center px-2 py-1 rounded-full ${langColor}">
                                <i class="fas fa-code mr-1"></i>
                                ${repo.linguagem_principal}
                            </span>
                            <span class="flex items-center text-gray-500">
                                <i class="fas fa-star text-yellow-500 mr-1"></i>
                                ${repo.estrelas.toLocaleString()}
                            </span>
                            <span class="flex items-center text-gray-500">
                                <i class="fas fa-code-branch text-green-500 mr-1"></i>
                                ${repo.forks.toLocaleString()}
                            </span>
                        </div>
                        <div class="text-xs text-gray-400">
                            ${Math.round(repo.tamanho_kb / 1024)} MB
                        </div>
                    </div>
                    
                    ${repo.topicos.length > 0 ? `
                        <div class="flex flex-wrap gap-1 mb-4">
                            ${repo.topicos.slice(0, 4).map(topic => 
                                `<span class="px-2 py-1 bg-blue-50 text-blue-700 text-xs rounded-full border border-blue-200">${topic}</span>`
                            ).join('')}
                            ${repo.topicos.length > 4 ? `<span class="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">+${repo.topicos.length - 4}</span>` : ''}
                        </div>
                    ` : ''}
                    
                    <button type="button" 
                            onclick="analisarRepositorio('${repo.url}')"
                            class="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all duration-200 font-medium transform hover:scale-105 shadow-md hover:shadow-lg">
                        <i class="fas fa-robot mr-2"></i>
                        An√°lise ${ag2Available ? 'AG2' : 'Tradicional'}
                        ${ag2Badge}
                    </button>
                `;
                
                container.appendChild(card);
            });

            document.getElementById('results').classList.remove('hidden');
            document.getElementById('results').scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        function mostrarMensagemNenhumRepo(usuario) {
            const loadingElement = document.getElementById('loading');
            loadingElement.innerHTML = `
                <div class="bg-yellow-50 border border-yellow-200 rounded-2xl p-8 text-center">
                    <i class="fas fa-search text-yellow-600 text-4xl mb-4"></i>
                    <h3 class="text-xl font-bold text-yellow-800 mb-2">Nenhum reposit√≥rio encontrado</h3>
                    <p class="text-yellow-700 mb-4">
                        N√£o foram encontrados reposit√≥rios p√∫blicos para "${usuario}"
                    </p>
                    <button onclick="location.reload()" 
                            class="mt-4 bg-yellow-600 text-white px-4 py-2 rounded-lg hover:bg-yellow-700 transition-colors">
                        <i class="fas fa-redo mr-2"></i>
                        Nova Busca
                    </button>
                </div>
            `;
        }

        function mostrarErroNaBusca(errorMessage) {
            const loadingElement = document.getElementById('loading');
            loadingElement.innerHTML = `
                <div class="bg-red-50 border border-red-200 rounded-2xl p-8 text-center">
                    <i class="fas fa-exclamation-triangle text-red-600 text-4xl mb-4"></i>
                    <h3 class="text-xl font-bold text-red-800 mb-2">Erro na Busca</h3>
                    <p class="text-red-700 mb-4">${errorMessage}</p>
                    <button onclick="location.reload()" 
                            class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
                        <i class="fas fa-redo mr-2"></i>
                        Tentar Novamente
                    </button>
                </div>
            `;
        }

        function popularFiltroLinguagens() {
            const linguagens = [...new Set(repositorios.map(r => r.linguagem_principal))];
            const filtroLinguagem = document.getElementById('filtroLinguagem');
            
            filtroLinguagem.innerHTML = '<option value="">Todas as linguagens</option>';
            linguagens.forEach(lang => {
                if (lang !== 'Desconhecida') {
                    filtroLinguagem.innerHTML += `<option value="${lang}">${lang}</option>`;
                }
            });
        }

        // Event listeners for filters
        document.addEventListener('DOMContentLoaded', function() {
            const filtroLinguagem = document.getElementById('filtroLinguagem');
            const ordenacao = document.getElementById('ordenacao');

            if (filtroLinguagem) {
                filtroLinguagem.addEventListener('change', function() {
                    const linguagem = this.value;
                    const filtrados = linguagem ? 
                        repositorios.filter(r => r.linguagem_principal === linguagem) : 
                        repositorios;
                    mostrarRepositorios(filtrados);
                });
            }

            if (ordenacao) {
                ordenacao.addEventListener('change', function() {
                    const ordenacaoTipo = this.value;
                    const ordenados = [...repositorios];
                    
                    switch(ordenacaoTipo) {
                        case 'stars':
                            ordenados.sort((a, b) => b.estrelas - a.estrelas);
                            break;
                        case 'name':
                            ordenados.sort((a, b) => a.nome.localeCompare(b.nome));
                            break;
                        case 'updated':
                            ordenados.sort((a, b) => new Date(b.atualizado_em) - new Date(a.atualizado_em));
                            break;
                    }
                    
                    mostrarRepositorios(ordenados);
                });
            }
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            if (analysisInterval) {
                clearInterval(analysisInterval);
            }
        });

        // Auto-logout em caso de inatividade (opcional)
        let inactivityTimer;
        const INACTIVITY_TIME = 30 * 60 * 1000; // 30 minutos

        function resetInactivityTimer() {
            clearTimeout(inactivityTimer);
            if (isAuthenticated) {
                inactivityTimer = setTimeout(() => {
                    alert('Sess√£o expirada por inatividade. Fa√ßa login novamente.');
                    realizarLogout();
                }, INACTIVITY_TIME);
            }
        }

        // Monitorar atividade do usu√°rio
        ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'].forEach(event => {
            document.addEventListener(event, resetInactivityTimer, true);
        });
    </script>
</body>
</html>"""
    
    try:
        with open("templates/index.html", "w", encoding="utf-8") as f:
            f.write(html_content)
        print("‚úÖ Template HTML com autentica√ß√£o completa criado/atualizado")
    except Exception as e:
        print(f"‚ùå Erro ao criar template: {e}")

# =============================================================================
# CONTINUA√á√ÉO DAS CLASSES AG2 (mantidas iguais)
# =============================================================================

# =============================================================================
# SISTEMA AG2 DE DOCUMENTA√á√ÉO AVAN√áADO (INTEGRADO COM AUTENTICA√á√ÉO)
# =============================================================================

class EnhancedDocumentationFlow:
    """Sistema AG2 Flow avan√ßado para documenta√ß√£o completa - Integrado com DocAgent"""
    
    def __init__(self, config: ModelConfig):
        self.config = config
        self.state = None
        self.tools = None
        self.agents = {}
        self.error_count = 0
        self.anonimizacao = SistemaAnonimizacao()
        self.code_analyzer = CodeAnalyzer()
        self._setup_llm_config()
        if AG2_AVAILABLE:
            self._setup_agents()
        print("ü§ñ Enhanced AG2 Documentation Flow inicializado para DocAgent")
    
    def _setup_llm_config(self):
        """Configura√ß√£o LLM otimizada"""
        self.llm_config = {
            "config_list": [{
                "model": self.config.llm_model,
                "api_type": "ollama",
                "base_url": "http://localhost:11434",
                "api_key": "fake_key"
            }],
            "timeout": self.config.timeout,
            "temperature": self.config.temperature,
            "max_tokens": self.config.max_tokens,
            "seed": 42
        }
    
    def _setup_agents(self):
        """Setup dos agentes com prompts aprimorados para DocAgent"""
        
        if not AG2_AVAILABLE:
            print("‚ö†Ô∏è AG2 n√£o dispon√≠vel - pulando setup de agentes")
            return
        
        # Advanced Code Explorer
        self.agents["code_explorer"] = ConversableAgent(
            name="AdvancedCodeExplorer",
            system_message="""Voc√™ √© um especialista em an√°lise avan√ßada de c√≥digo para o DocAgent Skyone. Sua fun√ß√£o √© realizar uma an√°lise COMPLETA e DETALHADA do reposit√≥rio para gerar relat√≥rios an√¥nimos t√©cnicos.

**MISS√ÉO PRINCIPAL:** Analisar reposit√≥rio GitHub para criar documenta√ß√£o t√©cnica completa em 3 partes:
1. Vis√£o Geral do Projeto (tecnologias, arquitetura)
2. Guia de Instala√ß√£o e Configura√ß√£o (baseado nas depend√™ncias encontradas)  
3. **Relat√≥rio T√©cnico dos Arquivos** (an√°lise detalhada - FOCO PRINCIPAL)

**TOOLS DISPON√çVEIS:**
- `directory_read(path)`: Lista e categoriza conte√∫do de diret√≥rios
- `file_read(file_path)`: An√°lise detalhada de arquivos individuais
- `find_key_files()`: Identifica arquivos importantes por categoria
- `analyze_code_structure()`: Estat√≠sticas completas da base de c√≥digo
- `detailed_file_analysis(max_files)`: An√°lise profunda dos arquivos principais

**PROTOCOLO DE AN√ÅLISE OBRIGAT√ìRIO:**
1. **Estrutura Geral**: `analyze_code_structure()` - entenda a arquitetura
2. **Arquivos-Chave**: `find_key_files()` - identifique componentes importantes  
3. **An√°lise Detalhada**: `detailed_file_analysis(15)` - examine arquivos principais
4. **Leitura Espec√≠fica**: Use `file_read()` em 3-5 arquivos mais cr√≠ticos
5. **Explora√ß√£o Dirigida**: `directory_read()` em diret√≥rios relevantes

**IMPORTANTE PARA DOCAGENT:**
- Identifique todas as tecnologias e frameworks utilizados
- Mapeie depend√™ncias (package.json, requirements.txt, etc.)
- Analise arquivos de configura√ß√£o
- Documente APIs e interfaces encontradas
- Identifique pontos de entrada da aplica√ß√£o
- Use TODAS as tools dispon√≠veis sistematicamente""",
            llm_config=self.llm_config,
            human_input_mode="NEVER"
        )
        
        # Enhanced Documentation Planner for DocAgent
        self.agents["documentation_planner"] = ConversableAgent(
            name="EnhancedDocumentationPlanner",
            system_message="""Voc√™ √© um planejador de documenta√ß√£o t√©cnica para o DocAgent Skyone. Baseado na an√°lise do AdvancedCodeExplorer, crie um plano OBRIGATORIAMENTE com 3 se√ß√µes espec√≠ficas para relat√≥rios an√¥nimos.

**PLANO OBRIGAT√ìRIO - EXATAMENTE 3 SE√á√ïES:**

1. **"Vis√£o Geral do Projeto"**
   - Prop√≥sito e funcionalidade principal
   - Tecnologias e linguagens utilizadas (identificadas na an√°lise)
   - Arquitetura geral e estrutura do c√≥digo

2. **"Guia de Instala√ß√£o e Configura√ß√£o"**  
   - Pr√©-requisitos baseados nas tecnologias encontradas
   - Passos de instala√ß√£o (baseado em package.json, requirements.txt, etc.)
   - Configura√ß√£o inicial do ambiente
   - Como executar o projeto

3. **"Relat√≥rio T√©cnico dos Arquivos"** (SE√á√ÉO PRINCIPAL DO DOCAGENT)
   - An√°lise detalhada de cada arquivo importante
   - Fun√ß√µes e classes principais identificadas
   - APIs e interfaces mapeadas
   - Fluxo de dados e l√≥gica da aplica√ß√£o
   - Depend√™ncias entre arquivos
   - Estrutura t√©cnica completa

**FORMATO JSON OBRIGAT√ìRIO:**
```json
{
  "overview": "Descri√ß√£o concisa mas completa do projeto baseada na an√°lise",
  "docs": [
    {
      "title": "Vis√£o Geral do Projeto",
      "description": "Apresenta√ß√£o completa do projeto com tecnologias identificadas",
      "prerequisites": "Conhecimento b√°sico de programa√ß√£o",
      "examples": ["Tecnologias utilizadas", "Arquitetura do sistema"],
      "goal": "Fornecer entendimento completo do prop√≥sito e stack tecnol√≥gico"
    },
    {
      "title": "Guia de Instala√ß√£o e Configura√ß√£o", 
      "description": "Instru√ß√µes baseadas nas depend√™ncias e configura√ß√µes encontradas",
      "prerequisites": "Sistema operacional compat√≠vel",
      "examples": ["Instala√ß√£o de depend√™ncias", "Configura√ß√£o do ambiente"],
      "goal": "Permitir instala√ß√£o e execu√ß√£o baseada na an√°lise do c√≥digo"
    },
    {
      "title": "Relat√≥rio T√©cnico dos Arquivos",
      "description": "An√°lise t√©cnica detalhada de arquivos, fun√ß√µes, classes e APIs identificadas",
      "prerequisites": "Conhecimento nas linguagens utilizadas no projeto",
      "examples": ["An√°lise arquivo por arquivo", "Documenta√ß√£o de fun√ß√µes", "Mapeamento de APIs"],
      "goal": "Fornecer relat√≥rio t√©cnico completo para desenvolvedores baseado na an√°lise real do c√≥digo"
    }
  ]
}
```

**IMPORTANTE:** Use apenas informa√ß√µes espec√≠ficas da an√°lise realizada pelo CodeExplorer.""",
            llm_config=self.llm_config,
            human_input_mode="NEVER"
        )
        
        # Technical Documentation Writer for DocAgent
        self.agents["technical_writer"] = ConversableAgent(
            name="TechnicalDocumentationWriter",
            system_message="""Voc√™ √© um escritor t√©cnico especializado no DocAgent Skyone. Escreva documenta√ß√£o t√©cnica DETALHADA e PROFISSIONAL baseada na an√°lise real do c√≥digo.

**ESTRUTURA PADR√ÉO PARA DOCAGENT:**

## Para "Vis√£o Geral do Projeto":
# Vis√£o Geral do Projeto

## üéØ Prop√≥sito
[Baseado na an√°lise dos arquivos principais]

## üõ†Ô∏è Stack Tecnol√≥gico
[Linguagens e frameworks identificados na an√°lise]

## üèóÔ∏è Arquitetura
[Estrutura identificada na an√°lise de c√≥digo]

## Para "Guia de Instala√ß√£o e Configura√ß√£o":
# Guia de Instala√ß√£o e Configura√ß√£o

## üìã Pr√©-requisitos
[Baseado nas tecnologias identificadas]

## üöÄ Instala√ß√£o
[Baseado em package.json, requirements.txt, etc. encontrados]

## ‚öôÔ∏è Configura√ß√£o
[Baseado em arquivos de config encontrados]

## ‚ñ∂Ô∏è Execu√ß√£o
[Baseado nos pontos de entrada identificados]

## Para "Relat√≥rio T√©cnico dos Arquivos" (PRINCIPAL DO DOCAGENT):
# Relat√≥rio T√©cnico dos Arquivos

## üìÅ Estrutura do Projeto
[Organiza√ß√£o identificada na an√°lise]

## üîß Arquivos Principais

### [NOME_ARQUIVO] (Linguagem identificada)
**Prop√≥sito:** [Identificado na an√°lise]
**Localiza√ß√£o:** `caminho/real/do/arquivo`

#### üìã Funcionalidades:
[Baseado na an√°lise real do c√≥digo]

#### üîß Fun√ß√µes Identificadas:
[Fun√ß√µes reais encontradas na an√°lise]

#### üìä Classes Encontradas:
[Classes reais identificadas]

#### üîå APIs/Interfaces:
[APIs reais mapeadas na an√°lise]

#### üìù Depend√™ncias:
[Imports e depend√™ncias reais]

**CRUCIAL:** Use APENAS informa√ß√µes da an√°lise real. N√£o invente detalhes.""",
            llm_config=self.llm_config,
            human_input_mode="NEVER"
        )
        
        # Documentation Reviewer for DocAgent
        self.agents["documentation_reviewer"] = ConversableAgent(
            name="DocumentationReviewer",
            system_message="""Voc√™ √© um revisor s√™nior de documenta√ß√£o t√©cnica para o DocAgent Skyone. Revise e aprimore garantindo PRECIS√ÉO T√âCNICA baseada na an√°lise real.

**CRIT√âRIOS DE REVIS√ÉO DOCAGENT:**

1. **Precis√£o:** Informa√ß√µes corretas baseadas na an√°lise?
2. **Completude:** Todas as 3 se√ß√µes est√£o completas?
3. **Consist√™ncia:** Informa√ß√µes consistentes entre se√ß√µes?
4. **Detalhamento T√©cnico:** Relat√≥rio t√©cnico suficientemente detalhado?
5. **Anonimiza√ß√£o:** Garantir que n√£o h√° informa√ß√µes pessoais expostas?

**FOQUE NO RELAT√ìRIO T√âCNICO:**
- Cada arquivo importante foi documentado com base na an√°lise real?
- Fun√ß√µes e classes reais foram documentadas?
- APIs identificadas est√£o bem explicadas?
- Depend√™ncias reais foram mapeadas?
- Estrutura reflete a an√°lise realizada?

**IMPORTANTE PARA DOCAGENT:**
- Corrija apenas imprecis√µes t√©cnicas
- Mantenha foco na an√°lise real do c√≥digo
- Garanta que informa√ß√µes s√£o √∫teis para desenvolvedores
- Certifique-se que o relat√≥rio √© profissional e an√¥nimo""",
            llm_config=self.llm_config,
            human_input_mode="NEVER"
        )
    
    def _register_tools_safely(self):
        """Registra tools avan√ßadas com tratamento de erros para AG2"""
        if not self.tools:
            print("‚ö†Ô∏è Tools n√£o inicializadas")
            return False
        
        if not AG2_AVAILABLE:
            print("‚ö†Ô∏è AG2 n√£o dispon√≠vel - pulando registro de tools")
            return False
        
        try:
            explorer = self.agents["code_explorer"]
            
            @explorer.register_for_llm(description="Lista e categoriza conte√∫do detalhado de diret√≥rios")
            @explorer.register_for_execution()
            def directory_read(path: str = "") -> str:
                return self.tools.directory_read(path)
            
            @explorer.register_for_llm(description="An√°lise detalhada de arquivos individuais com informa√ß√µes t√©cnicas")
            @explorer.register_for_execution()  
            def file_read(file_path: str) -> str:
                return self.tools.file_read(file_path)
            
            @explorer.register_for_llm(description="Identifica e categoriza arquivos importantes do projeto")
            @explorer.register_for_execution()
            def find_key_files() -> str:
                return self.tools.find_key_files()
            
            @explorer.register_for_llm(description="An√°lise completa da estrutura de c√≥digo com estat√≠sticas detalhadas")
            @explorer.register_for_execution()
            def analyze_code_structure() -> str:
                return self.tools.analyze_code_structure()
            
            @explorer.register_for_llm(description="An√°lise t√©cnica profunda dos arquivos mais importantes")
            @explorer.register_for_execution()
            def detailed_file_analysis(max_files: int = 10) -> str:
                return self.tools.detailed_file_analysis(max_files)
            
            print("üîß Tools AG2 registradas com sucesso")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao registrar tools AG2: {e}")
            return False

    def clone_repository(self, project_url: str) -> bool:
        """Clone com diagn√≥stico detalhado para DocAgent"""
        print(f"üì• Iniciando clone para DocAgent: {project_url}")
        
        # Inicializar estado se n√£o existir
        if self.state is None:
            print("üîß Inicializando estado do sistema...")
            self.state = DocumentationState(project_url=project_url)
        
        # Validar URL
        if not self._validate_github_url(project_url):
            print(f"‚ùå URL inv√°lida: {project_url}")
            return False
        
        # Verificar conectividade
        if not self._check_github_connectivity():
            print("‚ùå Sem conectividade com GitHub")
            return False
        
        # Verificar se reposit√≥rio existe
        if not self._check_repository_exists(project_url):
            print(f"‚ùå Reposit√≥rio n√£o existe ou √© privado: {project_url}")
            return False
        
        # Preparar diret√≥rios
        repo_name = project_url.split("/")[-1].replace(".git", "")
        workdir = Path("workdir").resolve()
        workdir.mkdir(exist_ok=True)
        repo_path = workdir / repo_name
        
        print(f"üìÅ Diret√≥rio de trabalho: {workdir}")
        print(f"üìÅ Destino do clone: {repo_path}")
        
        # Limpeza robusta do diret√≥rio existente
        if repo_path.exists():
            print(f"üóëÔ∏è Removendo diret√≥rio existente: {repo_path}")
            
            for attempt in range(3):
                try:
                    if repo_path.exists():
                        if attempt == 0:
                            shutil.rmtree(repo_path)
                        elif attempt == 1:
                            self._force_remove_directory(repo_path)
                        else:
                            if os.name == 'nt':
                                subprocess.run(["rmdir", "/s", "/q", str(repo_path)], shell=True)
                            else:
                                subprocess.run(["rm", "-rf", str(repo_path)])
                    
                    if not repo_path.exists():
                        print(f"‚úÖ Diret√≥rio removido com sucesso")
                        break
                    else:
                        print(f"‚ö†Ô∏è Tentativa {attempt + 1} falhou")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro na remo√ß√£o (tentativa {attempt + 1}): {e}")
                    
                if attempt < 2:
                    time.sleep(1)
            
            if repo_path.exists():
                backup_path = repo_path.with_suffix(f".backup_{int(time.time())}")
                try:
                    repo_path.rename(backup_path)
                    print(f"üîÑ Diret√≥rio movido para: {backup_path}")
                except Exception as e:
                    print(f"‚ùå N√£o foi poss√≠vel limpar o diret√≥rio: {e}")
                    return False
        
        # Construir URL de clone com token se dispon√≠vel
        clone_url = project_url
        try:
            github_token = os.environ.get('GITHUB_TOKEN')
            if github_token and 'github.com' in project_url and '@' not in project_url:
                import urllib.parse as _urlparse
                parsed = _urlparse.urlparse(project_url)
                netloc = f"{github_token}@{parsed.netloc}"
                clone_url = _urlparse.urlunparse(parsed._replace(netloc=netloc))
        except Exception:
            clone_url = project_url

        # Tentar clone com retry
        max_retries = 3
        clone_success = False
        
        for attempt in range(max_retries):
            try:
                print(f"üîÑ Tentativa de clone {attempt + 1}/{max_retries}")
                
                if attempt == 0:
                    cmd = ["git", "clone", "--depth", "1", "--single-branch", clone_url, str(repo_path)]
                elif attempt == 1:
                    cmd = ["git", "clone", "--single-branch", clone_url, str(repo_path)]
                else:
                    cmd = ["git", "clone", clone_url, str(repo_path)]
                
                print(f"üîß Executando: git clone [URL_PROTEGIDA] {repo_path}")
                
                result = subprocess.run(
                    cmd,
                    capture_output=True,
                    text=True,
                    timeout=300,
                )
                
                print(f"üîç C√≥digo de retorno: {result.returncode}")
                
                if result.returncode == 0:
                    print(f"‚úÖ Git clone executado com sucesso na tentativa {attempt + 1}")
                    clone_success = True
                    break
                else:
                    error_msg = result.stderr.strip()
                    print(f"‚ùå Erro no git clone (tentativa {attempt + 1}):")
                    print(f"   stderr: {error_msg[:200]}")
                    
                    if "already exists and is not an empty directory" in error_msg:
                        print("üîÑ Diret√≥rio ainda existe - tentando limpeza adicional")
                        if repo_path.exists():
                            try:
                                shutil.rmtree(repo_path, ignore_errors=True)
                                time.sleep(2)
                            except:
                                pass
                        continue
                    elif "not found" in error_msg.lower() or "does not exist" in error_msg.lower():
                        print("‚ùå Reposit√≥rio n√£o encontrado - parando tentativas")
                        return False
                    elif "permission denied" in error_msg.lower() or "forbidden" in error_msg.lower():
                        print("‚ùå Permiss√£o negada - reposit√≥rio privado")
                        return False
                    
                    if attempt < max_retries - 1:
                        wait_time = (attempt + 1) * 3
                        print(f"‚è≥ Aguardando {wait_time}s antes da pr√≥xima tentativa...")
                        time.sleep(wait_time)
                
            except subprocess.TimeoutExpired:
                print(f"‚è∞ Timeout na tentativa {attempt + 1} (5min)")
                if attempt < max_retries - 1:
                    print("‚è≥ Tentando novamente...")
                    continue
                else:
                    print("‚ùå Timeout final - reposit√≥rio muito grande")
                    return False
                    
            except Exception as e:
                print(f"‚ùå Erro na execu√ß√£o do git (tentativa {attempt + 1}): {str(e)}")
                if attempt < max_retries - 1:
                    continue
                else:
                    return False
        
        if not clone_success:
            print("‚ùå Todas as tentativas de clone falharam")
            return False
        
        # Verifica√ß√£o p√≥s-clone
        print(f"üîç Verificando resultado do clone...")
        print(f"   Caminho esperado: {repo_path}")
        print(f"   Diret√≥rio existe: {repo_path.exists()}")
        
        if not repo_path.exists():
            print("‚ùå Diret√≥rio do reposit√≥rio n√£o foi criado ap√≥s clone bem-sucedido")
            return False
        
        if not repo_path.is_dir():
            print(f"‚ùå {repo_path} existe mas n√£o √© um diret√≥rio")
            return False
        
        try:
            repo_items = list(repo_path.iterdir())
            print(f"üìÅ Itens no reposit√≥rio: {len(repo_items)}")
            
            for i, item in enumerate(repo_items[:5]):
                print(f"   {i+1}. {item.name} ({'dir' if item.is_dir() else 'file'})")
            
            if len(repo_items) == 0:
                print("‚ùå Reposit√≥rio est√° vazio")
                return False
            
            git_dir = repo_path / ".git"
            if git_dir.exists():
                print("‚úÖ Diret√≥rio .git encontrado - clone Git v√°lido")
            else:
                print("‚ö†Ô∏è Diret√≥rio .git n√£o encontrado - pode ser um problema")
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar conte√∫do do reposit√≥rio: {e}")
            return False
        
        # Atualizar estado
        self.state.repo_path = str(repo_path)
        self.state.current_phase = "cloned"
        
        # Inicializar tools avan√ßadas
        try:
            print("üîß Inicializando tools avan√ßadas de an√°lise para DocAgent...")
            self.tools = AdvancedRepositoryTools(repo_path)
            
            if AG2_AVAILABLE and not self._register_tools_safely():
                print("‚ö†Ô∏è Algumas tools AG2 falharam, mas continuando...")
            
            print(f"üéâ Clone conclu√≠do com sucesso para DocAgent!")
            print(f"   üìÅ Localiza√ß√£o: {repo_path}")
            print(f"   üìä Itens: {len(repo_items)} encontrados")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao inicializar tools: {e}")
            print("‚ö†Ô∏è Continuando sem tools - clone foi bem-sucedido")
            return True
    
    def _force_remove_directory(self, path: Path):
        """Remove diret√≥rio for√ßadamente"""
        try:
            for root, dirs, files in os.walk(path, topdown=False):
                for name in files:
                    file_path = Path(root) / name
                    try:
                        file_path.chmod(0o777)
                    except:
                        pass
                for name in dirs:
                    dir_path = Path(root) / name
                    try:
                        dir_path.chmod(0o777)
                    except:
                        pass
            
            shutil.rmtree(path)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na remo√ß√£o for√ßada: {e}")
            raise
    
    def _validate_github_url(self, url: str) -> bool:
        """Valida formato da URL do GitHub"""
        pattern = r"^https://github\.com/[\w\-\.]+/[\w\-\.]+/?$"
        return bool(re.match(pattern, url.strip()))
    
    def _check_github_connectivity(self) -> bool:
        """Verifica conectividade b√°sica com GitHub"""
        try:
            socket.setdefaulttimeout(10)
            response = urllib.request.urlopen("https://github.com", timeout=10)
            return response.getcode() == 200
        except Exception as e:
            print(f"‚ö†Ô∏è Erro de conectividade: {e}")
            return False
    
    def _check_repository_exists(self, project_url: str) -> bool:
        """Verifica se reposit√≥rio existe e √© p√∫blico"""
        try:
            request = urllib.request.Request(project_url)
            request.add_header('User-Agent', 'Mozilla/5.0 (compatible; DocAgent/2.0)')
            
            try:
                response = urllib.request.urlopen(request, timeout=15)
                return response.getcode() == 200
            except urllib.error.HTTPError as e:
                if e.code == 404:
                    print(f"‚ùå Reposit√≥rio n√£o encontrado (404): {project_url}")
                elif e.code == 403:
                    print(f"‚ùå Acesso negado (403): reposit√≥rio privado ou rate limit")
                else:
                    print(f"‚ùå Erro HTTP {e.code}: {e.reason}")
                return False
            except urllib.error.URLError as e:
                print(f"‚ùå Erro de URL: {e.reason}")
                return False
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar reposit√≥rio: {e}")
            return True

    def execute_analysis_with_ag2(self, project_url: str, anonymous: bool = True) -> Dict[str, Any]:
        """Executa an√°lise completa usando AG2 ou fallback"""
        try:
            print(f"üöÄ Iniciando an√°lise DocAgent com AG2: {project_url}")
            
            # Inicializar estado
            self.state = DocumentationState(project_url=project_url)
            
            # Fase 1: Clone
            clone_success = self.clone_repository(project_url)
            if not clone_success:
                return {
                    "status": "error",
                    "message": "Falha no clone do reposit√≥rio",
                    "error_count": self.error_count
                }
            
            # Verificar se AG2 est√° dispon√≠vel
            if not AG2_AVAILABLE:
                print("‚ö†Ô∏è AG2 n√£o dispon√≠vel - usando an√°lise simplificada")
                return self._execute_simplified_analysis(project_url, anonymous)
            
            # Fase 2: Enhanced Planning com AG2
            plan_success = self._enhanced_planning_phase_ag2()
            if not plan_success:
                print("‚ö†Ô∏è Planejamento AG2 falhou - usando fallback")
                return self._execute_simplified_analysis(project_url, anonymous)
            
            # Fase 3: Enhanced Documentation com AG2
            doc_success = self._enhanced_documentation_phase_ag2(anonymous)
            if not doc_success:
                print("‚ö†Ô∏è Documenta√ß√£o AG2 falhou - usando fallback")
                return self._execute_simplified_analysis(project_url, anonymous)
            
            # Sucesso com AG2
            generated_docs_base = []
            for p in self.state.generated_docs:
                try:
                    generated_docs_base.append(os.path.basename(p))
                except Exception:
                    generated_docs_base.append(p)

            return {
                "status": "success",
                "message": f"An√°lise AG2 completa criada: {len(self.state.generated_docs)} se√ß√µes",
                "generated_docs": generated_docs_base,
                "plan": self.state.plan.to_dict() if self.state.plan else None,
                "metadata": {
                    "project_url": project_url,
                    "repo_path": self.state.repo_path,
                    "docs_count": len(self.state.generated_docs),
                    "generated_at": datetime.now().isoformat(),
                    "error_count": self.error_count,
                    "system_version": "DocAgent Skyone v2.0 with AG2 + Auth",
                    "ag2_enabled": True,
                    "anonymous": anonymous,
                    "features": [
                        "AG2 Multi-agent analysis",
                        "Advanced code structure analysis", 
                        "Detailed file documentation",
                        "Anonymous reporting",
                        "Complete technical documentation",
                        "Authentication system"
                    ]
                }
            }
            
        except Exception as e:
            logger.error(f"Erro no fluxo AG2: {e}")
            logger.error(traceback.format_exc())
            return {
                "status": "error",
                "message": f"Erro cr√≠tico AG2: {str(e)[:100]}",
                "error_count": self.error_count + 1
            }
    
    # [Resto dos m√©todos da classe mantidos iguais...]
    def _enhanced_planning_phase_ag2(self) -> bool:
        """Fase de planejamento aprimorada com AG2"""
        try:
            print("üéØ Iniciando planejamento AG2...")
            
            planning_agents = [self.agents["code_explorer"], self.agents["documentation_planner"]]
            
            planning_chat = GroupChat(
                agents=planning_agents,
                messages=[],
                max_round=8,
                speaker_selection_method="round_robin"
            )
            
            planning_manager = GroupChatManager(
                groupchat=planning_chat,
                llm_config=self.llm_config
            )
            
            planning_prompt = f"""AN√ÅLISE COMPLETA DO REPOSIT√ìRIO PARA DOCAGENT: {self.state.repo_path}

**MISS√ÉO CR√çTICA:** Criar plano para documenta√ß√£o an√¥nima em EXATAMENTE 3 se√ß√µes:
1. Vis√£o Geral do Projeto
2. Guia de Instala√ß√£o e Configura√ß√£o  
3. **Relat√≥rio T√©cnico dos Arquivos** (PRINCIPAL)

**PROTOCOLO OBRIGAT√ìRIO:**

AdvancedCodeExplorer - Execute TODAS estas an√°lises em sequ√™ncia:

1. `analyze_code_structure()` - Entenda arquitetura geral
2. `find_key_files()` - Identifique componentes por categoria
3. `detailed_file_analysis(15)` - An√°lise profunda dos 15 arquivos principais
4. `file_read()` nos 3-5 arquivos mais cr√≠ticos identificados
5. `directory_read()` em diret√≥rios importantes (src/, lib/, etc.)

**IMPORTANTE:**
- Identifique todas as linguagens e frameworks
- Mapeie depend√™ncias e configura√ß√µes
- Analise arquivos de c√≥digo em detalhes
- Documente APIs e estruturas encontradas

EnhancedDocumentationPlanner - Baseado na an√°lise completa, crie plano JSON com foco em relat√≥rios t√©cnicos an√¥nimos."""
            
            # Executar an√°lise completa
            planning_result = self.agents["code_explorer"].initiate_chat(
                planning_manager,
                message=planning_prompt,
                clear_history=True
            )
            
            # Extrair plano
            plan_data = self._extract_plan_safely(planning_chat.messages)
            
            if plan_data:
                self.state.plan = plan_data
                self.state.current_phase = "planned"
                print(f"‚úÖ Plano AG2 criado: {len(plan_data.docs)} se√ß√µes")
                return True
            else:
                print("‚ùå Falha no plano AG2 - usando plano padr√£o")
                self.state.plan = self._create_comprehensive_plan()
                return True
                
        except Exception as e:
            print(f"‚ùå Erro no planejamento AG2: {str(e)[:100]}")
            self.error_count += 1
            self.state.plan = self._create_comprehensive_plan()
            return True
    
    def _enhanced_documentation_phase_ag2(self, anonymous: bool = True) -> bool:
        """Fase de documenta√ß√£o aprimorada com AG2"""
        try:
            print("üìù Iniciando documenta√ß√£o AG2...")
            
            if not self.state.plan or not self.state.plan.docs:
                print("‚ùå Sem plano - criando documenta√ß√£o padr√£o")
                return self._create_comprehensive_documentation(anonymous)
            
            doc_agents = [self.agents["technical_writer"], self.agents["documentation_reviewer"]]
            
            docs_created = []
            
            for i, doc_item in enumerate(self.state.plan.docs):
                print(f"üìÑ Criando se√ß√£o AG2 {i+1}/3: {doc_item.title}")
                
                try:
                    doc_chat = GroupChat(
                        agents=doc_agents,
                        messages=[],
                        max_round=6,
                        speaker_selection_method="round_robin"
                    )
                    
                    doc_manager = GroupChatManager(
                        groupchat=doc_chat,
                        llm_config=self.llm_config
                    )
                    
                    # Prompt espec√≠fico por se√ß√£o
                    if "t√©cnico" in doc_item.title.lower() or "arquivo" in doc_item.title.lower():
                        # Se√ß√£o t√©cnica principal - MAIS DETALHADA
                        doc_prompt = f"""CRIAR RELAT√ìRIO T√âCNICO DETALHADO PARA DOCAGENT

**SE√á√ÉO:** {doc_item.title}
**PROJETO:** {self.state.project_url}
**MODO:** {'An√¥nimo' if anonymous else 'Original'}

**REQUISITOS ESPECIAIS PARA RELAT√ìRIO T√âCNICO:**
Esta √© a se√ß√£o MAIS IMPORTANTE do DocAgent. Deve incluir:

1. **Estrutura Geral dos Arquivos** (baseada na an√°lise real)
2. **Relat√≥rio de CADA arquivo importante** analisado:
   - Prop√≥sito e funcionalidade identificada
   - Linguagem e frameworks detectados
   - Fun√ß√µes e classes reais encontradas
   - APIs e interfaces mapeadas
   - Depend√™ncias e imports identificados
   - Complexidade e linhas de c√≥digo
   - An√°lise t√©cnica espec√≠fica

3. **Mapeamento de tecnologias** (real)
4. **Arquitetura do sistema** (identificada)
5. **Relat√≥rio para desenvolvedores**

**FORMATO OBRIGAT√ìRIO:**
# {doc_item.title}

## üìÅ Estrutura do Projeto
[Organiza√ß√£o real identificada]

## üîß Arquivos Analisados

### arquivo_real.ext (Linguagem_Real)
**Prop√≥sito:** [Prop√≥sito identificado na an√°lise]
**Localiza√ß√£o:** `caminho/real/identificado`
**Tamanho:** [Tamanho real] | **Linhas:** [Linhas reais]
**Complexidade:** [Complexidade calculada]

#### üìã Funcionalidades Identificadas:
[Baseado na an√°lise real do c√≥digo]

#### üîß Fun√ß√µes Encontradas:
[Fun√ß√µes reais identificadas na an√°lise]

#### üìä Classes Detectadas:
[Classes reais encontradas]

#### üîå APIs/Interfaces:
[APIs reais mapeadas]

#### üì¶ Depend√™ncias:
[Imports reais identificados]

#### üìù An√°lise T√©cnica:
[An√°lise espec√≠fica baseada no c√≥digo real]

[REPETIR PARA CADA ARQUIVO IMPORTANTE ANALISADO]

## üèóÔ∏è Arquitetura Identificada
[Como os arquivos se relacionam - baseado na an√°lise]

TechnicalDocumentationWriter: Use APENAS informa√ß√µes da an√°lise real do c√≥digo
DocumentationReviewer: Revise garantindo precis√£o t√©cnica baseada nos dados reais

**CRUCIAL:** Use apenas dados da an√°lise realizada. N√£o invente informa√ß√µes."""
                    else:
                        # Se√ß√µes 1 e 2 - baseadas na an√°lise
                        doc_prompt = f"""CRIAR DOCUMENTA√á√ÉO BASEADA NA AN√ÅLISE: {doc_item.title}

**CONTEXTO:**
- Projeto: {self.state.project_url}
- Se√ß√£o: {doc_item.title}
- Descri√ß√£o: {doc_item.description}
- Objetivo: {doc_item.goal}
- Modo: {'An√¥nimo' if anonymous else 'Original'}

**INFORMA√á√ïES DA AN√ÅLISE:**
Use as informa√ß√µes t√©cnicas identificadas na an√°lise do c√≥digo para criar documenta√ß√£o precisa.

TechnicalDocumentationWriter: Crie documenta√ß√£o baseada na an√°lise real
DocumentationReviewer: Revise garantindo precis√£o

Use apenas informa√ß√µes da an√°lise realizada."""
                    
                    # Criar documenta√ß√£o
                    doc_result = self.agents["technical_writer"].initiate_chat(
                        doc_manager,
                        message=doc_prompt,
                        clear_history=True
                    )
                    
                    # Extrair e salvar
                    final_doc = self._extract_documentation_safely(doc_chat.messages, doc_item.title)
                    
                    if final_doc:
                        doc_path = self._save_documentation(doc_item.title, final_doc, anonymous)
                        if doc_path:
                            docs_created.append(doc_path)
                            if not hasattr(self.state, 'generated_docs') or self.state.generated_docs is None:
                                self.state.generated_docs = []
                            self.state.generated_docs.append(doc_path)
                            print(f"‚úÖ Se√ß√£o AG2 criada: {doc_item.title}")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro na se√ß√£o AG2 {doc_item.title}: {str(e)[:50]}")
                    # Criar documenta√ß√£o b√°sica como fallback
                    basic_doc = self._generate_section_fallback(doc_item.title, i, anonymous)
                    doc_path = self._save_documentation(doc_item.title, basic_doc, anonymous)
                    if doc_path:
                        docs_created.append(doc_path)
                        if not hasattr(self.state, 'generated_docs') or self.state.generated_docs is None:
                            self.state.generated_docs = []
                        self.state.generated_docs.append(doc_path)
            
            if docs_created:
                self.state.current_phase = "completed"
                print(f"üéâ Documenta√ß√£o AG2 completa: {len(docs_created)} arquivos")
                return True
            else:
                print("‚ö†Ô∏è Nenhuma doc AG2 criada - gerando documenta√ß√£o padr√£o")
                return self._create_comprehensive_documentation(anonymous)
                
        except Exception as e:
            print(f"‚ùå Erro na documenta√ß√£o AG2: {str(e)[:100]}")
            return self._create_comprehensive_documentation(anonymous)
    
    def _execute_simplified_analysis(self, project_url: str, anonymous: bool = True) -> Dict[str, Any]:
        """An√°lise simplificada quando AG2 n√£o est√° dispon√≠vel"""
        try:
            print("üîß Executando an√°lise simplificada (sem AG2)...")
            
            # Verificar se temos tools e estado
            if not self.tools or not self.state:
                return {
                    "status": "error",
                    "message": "Estado ou tools n√£o inicializados",
                    "error_count": self.error_count + 1
                }
            
            # Usar tools diretamente para an√°lise
            analysis_data = self.analyze_repository_structure_direct(self.state.repo_path)
            
            # Criar plano simplificado
            if not self.state.plan:
                self.state.plan = self._create_comprehensive_plan()
            
            # Gerar documenta√ß√£o simplificada
            generated_docs = self.generate_documentation_direct(
                self.state.repo_path,
                project_url,
                analysis_data,
                anonymous
            )
            
            if generated_docs:
                self.state.generated_docs = generated_docs
                # Normalizar os nomes dos arquivos retornados para conter apenas o nome base
                generated_docs_base = []
                for p in generated_docs:
                    try:
                        generated_docs_base.append(os.path.basename(p))
                    except Exception:
                        generated_docs_base.append(p)
                return {
                    "status": "success",
                    "message": f"An√°lise simplificada conclu√≠da: {len(generated_docs)} se√ß√µes",
                    "generated_docs": generated_docs_base,
                    "plan": self.state.plan.to_dict() if self.state.plan else None,
                    "metadata": {
                        "project_url": project_url,
                        "repo_path": self.state.repo_path,
                        "docs_count": len(generated_docs),
                        "generated_at": datetime.now().isoformat(),
                        "error_count": self.error_count,
                        "system_version": "DocAgent Skyone v2.0 (Simplified) + Auth",
                        "ag2_enabled": False,
                        "anonymous": anonymous,
                        "features": [
                            "Direct code analysis",
                            "Simplified documentation",
                            "Anonymous reporting",
                            "Basic technical documentation",
                            "Authentication system"
                        ]
                    }
                }
            else:
                return {
                    "status": "error",
                    "message": "Falha na gera√ß√£o de documenta√ß√£o simplificada",
                    "error_count": self.error_count + 1
                }
                
        except Exception as e:
            print(f"‚ùå Erro na an√°lise simplificada: {e}")
            return {
                "status": "error",
                "message": f"Erro cr√≠tico na an√°lise simplificada: {str(e)[:100]}",
                "error_count": self.error_count + 1
            }
    
    # [M√©todos auxiliares mantidos iguais...]
    def _create_comprehensive_plan(self) -> DocPlan:
        """Plano completo obrigat√≥rio com 3 se√ß√µes"""
        print("üìã Criando plano completo com 3 se√ß√µes...")
        
        return DocPlan(
            overview="Documenta√ß√£o t√©cnica completa gerada automaticamente para an√°lise detalhada do projeto",
            docs=[
                DocItem(
                    title="Vis√£o Geral do Projeto",
                    description="An√°lise completa do prop√≥sito, tecnologias e arquitetura do projeto",
                    prerequisites="Conhecimento b√°sico de desenvolvimento de software",
                    examples=["Funcionalidades principais", "Stack tecnol√≥gico", "Arquitetura geral"],
                    goal="Fornecer entendimento completo do projeto e suas tecnologias"
                ),
                DocItem(
                    title="Guia de Instala√ß√£o e Configura√ß√£o",
                    description="Instru√ß√µes detalhadas para instala√ß√£o, configura√ß√£o e execu√ß√£o do projeto",
                    prerequisites="Sistema operacional compat√≠vel e ferramentas de desenvolvimento",
                    examples=["Pr√©-requisitos do sistema", "Passos de instala√ß√£o", "Comandos de execu√ß√£o"],
                    goal="Permitir que desenvolvedores configurem e executem o projeto rapidamente"
                ),
                DocItem(
                    title="Relat√≥rio T√©cnico dos Arquivos",
                    description="An√°lise t√©cnica detalhada de cada arquivo importante: fun√ß√µes, classes, APIs, fluxo de c√≥digo e arquitetura",
                    prerequisites="Conhecimento nas linguagens e frameworks utilizados no projeto",
                    examples=["An√°lise arquivo por arquivo", "Documenta√ß√£o de fun√ß√µes", "Mapeamento de APIs", "Fluxo de execu√ß√£o"],
                    goal="Fornecer relat√≥rio t√©cnico completo para desenvolvedores entenderem, modificarem e contribu√≠rem com o c√≥digo"
                )
            ]
        )

    def _extract_plan_safely(self, messages: List[Dict]) -> Optional[DocPlan]:
        """Extra√ß√£o robusta do plano JSON"""
        try:
            for msg in reversed(messages):
                content = msg.get('content', '')
                
                # Buscar padr√µes JSON mais flex√≠veis
                json_patterns = [
                    r'\{[^{}]*"overview"[^{}]*"docs"[^{}]*\}',
                    r'\{.*?"overview".*?"docs".*?\}',
                    r'```json\s*(\{.*?\})\s*```',
                    r'```\s*(\{.*?\})\s*```'
                ]
                
                for pattern in json_patterns:
                    matches = re.findall(pattern, content, re.DOTALL)
                    for match in matches:
                        try:
                            clean_json = re.sub(r'```json\n?|\n?```', '', match)
                            clean_json = clean_json.strip()
                            
                            data = json.loads(clean_json)
                            
                            if 'overview' in data and 'docs' in data:
                                # Validar que temos pelo menos 3 se√ß√µes
                                if len(data['docs']) >= 3:
                                    return DocPlan.from_dict(data)
                                else:
                                    print(f"‚ö†Ô∏è Plano com apenas {len(data['docs'])} se√ß√µes - esperado 3")
                        except (json.JSONDecodeError, Exception) as e:
                            print(f"‚ö†Ô∏è Erro no parse JSON: {e}")
                            continue
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na extra√ß√£o do plano: {e}")
            return None
    
    def _extract_documentation_safely(self, messages: List[Dict], title: str) -> Optional[str]:
        """Extra√ß√£o robusta da documenta√ß√£o das mensagens"""
        try:
            candidates = []
            
            for msg in reversed(messages):
                content = msg.get('content', '')
                name = msg.get('name', '')
                
                # Priorizar mensagens do reviewer
                if 'reviewer' in name.lower() and len(content) > 200:
                    candidates.append(content)
                elif 'writer' in name.lower() and len(content) > 200:
                    candidates.append(content)
                elif '##' in content and len(content) > 300:
                    candidates.append(content)
            
            # Retornar melhor candidato
            if candidates:
                best_candidate = max(candidates, key=len)  # Maior conte√∫do
                return best_candidate
            
            # Fallback espec√≠fico por se√ß√£o
            title_lower = title.lower()
            if "vis√£o" in title_lower or "geral" in title_lower:
                return self._generate_section_fallback(title, 0, True)
            elif "instala√ß√£o" in title_lower or "configura√ß√£o" in title_lower:
                return self._generate_section_fallback(title, 1, True)
            elif "t√©cnico" in title_lower or "arquivo" in title_lower:
                return self._generate_section_fallback(title, 2, True)
            else:
                return self._generate_basic_doc(title)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na extra√ß√£o: {e}")
            return self._generate_basic_doc(title)
    
    # [M√©todos auxiliares de gera√ß√£o de documenta√ß√£o...]
    def analyze_repository_structure_direct(self, repo_path: str) -> Dict[str, Any]:
        """An√°lise direta da estrutura do reposit√≥rio (sem AG2)"""
        try:
            print("üîç An√°lise direta da estrutura...")
            
            if not self.tools:
                return {"error": "Tools n√£o inicializadas"}
            
            # An√°lise usando tools diretamente
            structure_analysis = self.tools.analyze_code_structure()
            key_files = self.tools.find_key_files()
            detailed_analysis = self.tools.detailed_file_analysis(15)
            
            # Processar resultados
            analysis_data = {
                'structure_analysis': structure_analysis,
                'key_files': key_files,
                'detailed_analysis': detailed_analysis,
                'total_files': 0,
                'code_files': 0,
                'languages': {},
                'main_language': 'Unknown',
                'file_analyses': [],
                'dependencies': {},
                'advanced_stats': {}
            }
            
            # An√°lise b√°sica adicional
            repo_path_obj = Path(repo_path)
            total_files = 0
            code_files = 0
            languages = {}
            
            try:
                for root, dirs, files in os.walk(repo_path_obj):
                    dirs[:] = [d for d in dirs if not d.startswith('.')]
                    
                    for file in files:
                        if file.startswith('.'):
                            continue
                        
                        total_files += 1
                        file_path = Path(root) / file
                        ext = file_path.suffix.lower()
                        
                        # Mapear linguagens
                        lang_map = {
                            '.py': 'Python', '.js': 'JavaScript', '.ts': 'TypeScript',
                            '.java': 'Java', '.cpp': 'C++', '.c': 'C', '.go': 'Go',
                            '.rs': 'Rust', '.php': 'PHP', '.rb': 'Ruby'
                        }
                        
                        if ext in lang_map:
                            code_files += 1
                            lang = lang_map[ext]
                            languages[lang] = languages.get(lang, 0) + 1
                
                analysis_data.update({
                    'total_files': total_files,
                    'code_files': code_files,
                    'languages': languages,
                    'main_language': max(languages.keys(), key=languages.get) if languages else 'Unknown'
                })
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erro na an√°lise adicional: {e}")
            
            return analysis_data
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise direta: {e}")
            return {"error": str(e)}
    
    def generate_documentation_direct(self, repo_path: str, repo_url: str, analysis_data: Dict, anonymous: bool = True) -> List[str]:
        """Gera documenta√ß√£o direta (sem AG2)"""
        try:
            print("üìù Gerando documenta√ß√£o direta...")
            
            docs_dir = Path("docs")
            docs_dir.mkdir(exist_ok=True)
            
            url_final = self.anonimizacao.anonimizar_url_repositorio(repo_url) if anonymous else repo_url
            generated_docs = []
            
            # 1. Vis√£o Geral do Projeto
            overview_doc = self._generate_overview_direct(analysis_data, repo_path, url_final, anonymous)
            overview_path = docs_dir / ("01_visao_geral_anonimo.md" if anonymous else "01_visao_geral.md")
            with open(overview_path, 'w', encoding='utf-8') as f:
                f.write(overview_doc)
            generated_docs.append(str(overview_path))
            
            # 2. Guia de Instala√ß√£o
            install_doc = self._generate_installation_direct(analysis_data, anonymous)
            install_path = docs_dir / ("02_guia_instalacao_anonimo.md" if anonymous else "02_guia_instalacao.md")
            with open(install_path, 'w', encoding='utf-8') as f:
                f.write(install_doc)
            generated_docs.append(str(install_path))
            
            # 3. Relat√≥rio T√©cnico
            technical_doc = self._generate_technical_report_direct(analysis_data, repo_path, anonymous)
            technical_path = docs_dir / ("03_relatorio_tecnico_anonimo.md" if anonymous else "03_relatorio_tecnico.md")
            with open(technical_path, 'w', encoding='utf-8') as f:
                f.write(technical_doc)
            generated_docs.append(str(technical_path))
            
            print(f"‚úÖ Documenta√ß√£o direta gerada: {len(generated_docs)} arquivos")
            return generated_docs
            
        except Exception as e:
            print(f"‚ùå Erro na gera√ß√£o direta: {e}")
            return []
    
    # [M√©todos de gera√ß√£o de se√ß√µes espec√≠ficas...]
    def _generate_section_fallback(self, title: str, section_index: int, anonymous: bool = True) -> str:
        """Gera documenta√ß√£o de fallback espec√≠fica por se√ß√£o"""
        
        if section_index == 0:  # Vis√£o Geral
            return f"""# {title}

## üéØ Prop√≥sito do Projeto

Este projeto foi analisado automaticamente pelo DocAgent Skyone v2.0 com sistema de autentica√ß√£o. A an√°lise identificou uma base de c√≥digo organizada com m√∫ltiplos arquivos e funcionalidades.

## üõ†Ô∏è Tecnologias Identificadas

Baseado na an√°lise da estrutura de arquivos, o projeto utiliza:
- M√∫ltiplas linguagens de programa√ß√£o
- Estrutura organizada de diret√≥rios
- Arquivos de configura√ß√£o espec√≠ficos

## üèóÔ∏è Arquitetura

O projeto est√° organizado em uma estrutura hier√°rquica de arquivos e diret√≥rios, com separa√ß√£o clara de responsabilidades entre diferentes componentes.

## üìä Caracter√≠sticas

- Projeto com estrutura bem definida
- M√∫ltiplos arquivos de c√≥digo
- Sistema modular e organizado

---
*Se√ß√£o gerada automaticamente pelo DocAgent Skyone v2.0 - {'Modo An√¥nimo' if anonymous else 'Modo Original'} com Autentica√ß√£o*
"""
        
        elif section_index == 1:  # Instala√ß√£o
            return f"""# {title}

## üìã Pr√©-requisitos

Antes de instalar e executar este projeto, certifique-se de ter:

- Sistema operacional compat√≠vel (Linux, macOS, ou Windows)
- Ferramentas de desenvolvimento apropriadas para a linguagem utilizada
- Acesso ao terminal/linha de comando
- Git instalado para clonagem do reposit√≥rio

## üöÄ Instala√ß√£o

### 1. Clone o Reposit√≥rio
```bash
git clone [URL_DO_PROJETO]
cd [nome-do-repositorio]
```

### 2. Instale as Depend√™ncias
Verifique os arquivos de configura√ß√£o do projeto (package.json, requirements.txt, etc.) e instale as depend√™ncias conforme a tecnologia utilizada.

### 3. Configure o Ambiente
Siga as instru√ß√µes espec√≠ficas do projeto para configura√ß√£o de vari√°veis de ambiente e arquivos de configura√ß√£o.

## ‚ñ∂Ô∏è Execu√ß√£o

Execute o projeto seguindo as instru√ß√µes espec√≠ficas da tecnologia utilizada. Consulte os arquivos principais (main.py, index.js, etc.) para entender o ponto de entrada.

## üìù Observa√ß√µes

- Consulte a documenta√ß√£o espec√≠fica do projeto para instru√ß√µes detalhadas
- Verifique os arquivos README se dispon√≠veis
- Para problemas de instala√ß√£o, consulte a documenta√ß√£o da tecnologia utilizada

---
*Se√ß√£o gerada automaticamente pelo DocAgent Skyone v2.0 - {'Modo An√¥nimo' if anonymous else 'Modo Original'} com Autentica√ß√£o*
"""
        
        else:  # Relat√≥rio T√©cnico (se√ß√£o 2)
            return f"""# {title}

## üìÅ Estrutura Geral

O projeto cont√©m uma organiza√ß√£o estruturada de arquivos e diret√≥rios, cada um com responsabilidades espec√≠ficas no sistema.

## üîß Arquivos Principais

### An√°lise Autom√°tica

Este projeto foi analisado automaticamente e cont√©m m√∫ltiplos arquivos importantes. Cada arquivo possui:

- **Prop√≥sito espec√≠fico** no contexto do projeto
- **Implementa√ß√£o** usando as tecnologias do stack
- **Intera√ß√µes** com outros componentes do sistema

### Categorias de Arquivos Identificadas

#### üíª Arquivos de C√≥digo
Arquivos contendo a l√≥gica principal do sistema, implementando funcionalidades espec√≠ficas.

#### ‚öôÔ∏è Arquivos de Configura√ß√£o  
Arquivos respons√°veis pela configura√ß√£o do ambiente, depend√™ncias e par√¢metros do sistema.

#### üìñ Arquivos de Documenta√ß√£o
Arquivos contendo informa√ß√µes sobre o projeto, incluindo README, licen√ßas e guias.

## üèóÔ∏è Arquitetura do Sistema

O projeto segue uma arquitetura modular onde:

- Diferentes arquivos t√™m responsabilidades espec√≠ficas
- Existe separa√ß√£o clara entre l√≥gica de neg√≥cio e configura√ß√£o
- O sistema √© organizado de forma hier√°rquica

## üìã Para Desenvolvedores

Para contribuir com este projeto:

1. **Analise a estrutura** de arquivos para entender a organiza√ß√£o
2. **Identifique o ponto de entrada** principal da aplica√ß√£o
3. **Examine as depend√™ncias** listadas nos arquivos de configura√ß√£o
4. **Siga os padr√µes** estabelecidos no c√≥digo existente

## üìù Observa√ß√µes T√©cnicas

- Este projeto cont√©m m√∫ltiplos arquivos com funcionalidades espec√≠ficas
- A estrutura segue boas pr√°ticas de organiza√ß√£o de c√≥digo
- Para an√°lise detalhada, examine diretamente os arquivos fonte

---
*Relat√≥rio gerado automaticamente pelo DocAgent Skyone v2.0 - {'Modo An√¥nimo' if anonymous else 'Modo Original'} com Autentica√ß√£o*
"""
    
    def _generate_basic_doc(self, title: str) -> str:
        """Gera documenta√ß√£o b√°sica como fallback"""
        return f"""# {title}

## üìã Vis√£o Geral

Esta se√ß√£o documenta {title.lower()} do projeto. A documenta√ß√£o foi gerada automaticamente baseada na an√°lise do reposit√≥rio.

## üöÄ Informa√ß√µes

Esta documenta√ß√£o faz parte de um conjunto completo de 3 se√ß√µes:
1. Vis√£o Geral do Projeto
2. Guia de Instala√ß√£o e Configura√ß√£o
3. Relat√≥rio T√©cnico dos Arquivos

## üìù Observa√ß√µes

- Esta documenta√ß√£o foi gerada automaticamente pelo DocAgent Skyone v2.0 com Autentica√ß√£o
- Para informa√ß√µes mais detalhadas, consulte o c√≥digo-fonte do projeto
- O sistema analisou a estrutura do reposit√≥rio para gerar esta documenta√ß√£o

---
*Gerado automaticamente em {datetime.now().strftime('%d/%m/%Y %H:%M:%S')} pelo DocAgent Skyone v2.0*
"""
    
    def _save_documentation(self, title: str, content: str, anonymous: bool = True) -> Optional[str]:
        """Salva documenta√ß√£o com nomes padronizados"""
        try:
            docs_dir = Path("docs")
            docs_dir.mkdir(exist_ok=True)
            
            # Nomes padronizados para as 3 se√ß√µes
            title_lower = title.lower()
            suffix = "_anonimo" if anonymous else ""
            
            if "vis√£o" in title_lower or "geral" in title_lower:
                filename = f"01_visao_geral{suffix}.md"
            elif "instala√ß√£o" in title_lower or "configura√ß√£o" in title_lower:
                filename = f"02_instalacao_configuracao{suffix}.md"
            elif "t√©cnico" in title_lower or "arquivo" in title_lower:
                filename = f"03_relatorio_tecnico{suffix}.md"
            else:
                # Fallback para nome seguro
                safe_title = re.sub(r'[^\w\s-]', '', title)
                safe_title = re.sub(r'[-\s]+', '_', safe_title)
                filename = f"{safe_title.lower()}{suffix}.md"
            
            doc_path = docs_dir / filename
            
            # Salvar com encoding UTF-8
            with open(doc_path, "w", encoding="utf-8") as f:
                f.write(content)
            
            print(f"üíæ Salvo: {doc_path}")
            return str(doc_path)
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar {title}: {e}")
            return None
    
    def _create_comprehensive_documentation(self, anonymous: bool = True) -> bool:
        """Cria documenta√ß√£o completa como √∫ltimo recurso"""
        try:
            print("üìù Criando documenta√ß√£o completa...")
            
            # Garantir que temos estado v√°lido
            if not self.state:
                print("‚ö†Ô∏è Estado n√£o encontrado - inicializando")
                self.state = DocumentationState(
                    project_url="unknown",
                    current_phase="documentation",
                    generated_docs=[],
                    metadata={}
                )
            
            # Garantir que temos o plano completo
            if not self.state.plan:
                self.state.plan = self._create_comprehensive_plan()
            
            # Criar as 3 se√ß√µes obrigat√≥rias
            sections = [
                ("Vis√£o Geral do Projeto", 0),
                ("Guia de Instala√ß√£o e Configura√ß√£o", 1), 
                ("Relat√≥rio T√©cnico dos Arquivos", 2)
            ]
            
            docs_created = []
            
            for title, index in sections:
                print(f"üìÑ Gerando se√ß√£o {index+1}/3: {title}")
                
                doc_content = self._generate_section_fallback(title, index, anonymous)
                doc_path = self._save_documentation(title, doc_content, anonymous)
                
                if doc_path:
                    docs_created.append(doc_path)
                    # Garantir que generated_docs existe
                    if not hasattr(self.state, 'generated_docs') or self.state.generated_docs is None:
                        self.state.generated_docs = []
                    self.state.generated_docs.append(doc_path)
            
            if docs_created:
                print(f"‚úÖ Documenta√ß√£o completa criada: {len(docs_created)} se√ß√µes")
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå Erro na documenta√ß√£o completa: {e}")
            return False

    # [M√©todos de gera√ß√£o espec√≠ficos continuam aqui...]
    def _generate_overview_direct(self, analysis_data: Dict, repo_path: str, url_final: str, anonymous: bool) -> str:
        """Gera vis√£o geral direta"""
        languages = analysis_data.get('languages', {})
        main_lang = analysis_data.get('main_language', 'Desconhecida')
        total_files = analysis_data.get('total_files', 0)
        code_files = analysis_data.get('code_files', 0)
        
        doc_lines = []
        
        doc_lines.append("# Vis√£o Geral do Projeto\n")
        
        if anonymous:
            doc_lines.append("> **Nota:** Este relat√≥rio foi anonimizado para proteger informa√ß√µes pessoais.\n")
        
        doc_lines.append("## üéØ Prop√≥sito do Projeto\n")
        doc_lines.append("Este projeto foi analisado automaticamente pelo DocAgent Skyone v2.0 com sistema de autentica√ß√£o. ")
        doc_lines.append("A an√°lise identificou uma base de c√≥digo organizada com estrutura bem definida ")
        doc_lines.append("e implementa√ß√£o usando tecnologias modernas.\n")
        
        doc_lines.append("## üõ†Ô∏è Stack Tecnol√≥gico\n")
        doc_lines.append(f"**Linguagem Principal:** {main_lang}\n")
        doc_lines.append(f"**Total de Arquivos:** {total_files:,}\n")
        doc_lines.append(f"**Arquivos de C√≥digo:** {code_files:,}\n")
        
        if languages:
            doc_lines.append("### Distribui√ß√£o por Linguagem\n")
            for lang, count in sorted(languages.items(), key=lambda x: x[1], reverse=True):
                percentage = (count / sum(languages.values())) * 100
                doc_lines.append(f"- **{lang}:** {count} arquivos ({percentage:.1f}%)\n")
        
        doc_lines.append("\n## üèóÔ∏è Arquitetura\n")
        doc_lines.append("O projeto est√° organizado em uma estrutura hier√°rquica bem definida, ")
        doc_lines.append("com separa√ß√£o clara de responsabilidades entre diferentes componentes. ")
        doc_lines.append("A an√°lise identificou uma arquitetura modular com boas pr√°ticas de organiza√ß√£o.\n")
        
        doc_lines.append("## üìä Caracter√≠sticas T√©cnicas\n")
        doc_lines.append(f"- Projeto multi-linguagem com foco em {main_lang}\n")
        doc_lines.append("- Estrutura organizacional bem definida\n")
        doc_lines.append("- Implementa√ß√£o seguindo boas pr√°ticas de desenvolvimento\n")
        doc_lines.append("- C√≥digo modular e bem estruturado\n")
        
        doc_lines.append(f"\n## üìã Informa√ß√µes do Relat√≥rio\n")
        doc_lines.append(f"- **URL do Reposit√≥rio:** {url_final}\n")
        doc_lines.append(f"- **Data da An√°lise:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}\n")
        doc_lines.append(f"- **Sistema:** DocAgent Skyone v2.0 com Autentica√ß√£o\n")
        doc_lines.append(f"- **Modo:** {'An√¥nimo' if anonymous else 'Original'}\n")
        
        doc_lines.append("\n---")
        doc_lines.append("\n*Relat√≥rio gerado automaticamente pelo DocAgent Skyone v2.0 com Autentica√ß√£o*\n")
        
        return "".join(doc_lines)
    
    def _generate_installation_direct(self, analysis_data: Dict, anonymous: bool) -> str:
        """Gera guia de instala√ß√£o direto"""
        main_lang = analysis_data.get('main_language', 'Desconhecida')
        
        doc_lines = []
        
        doc_lines.append("# Guia de Instala√ß√£o e Configura√ß√£o\n")
        
        if anonymous:
            doc_lines.append("> **Nota:** Este guia foi gerado a partir de an√°lise an√¥nima.\n")
        
        doc_lines.append("## üìã Pr√©-requisitos do Sistema\n")
        doc_lines.append("### Ferramentas B√°sicas\n")
        doc_lines.append("- Git (para clonagem do reposit√≥rio)\n")
        doc_lines.append("- Sistema operacional: Linux, macOS ou Windows\n")
        
        # Pr√©-requisitos espec√≠ficos por linguagem
        if main_lang == 'Python':
            doc_lines.append("\n### Python\n")
            doc_lines.append("- Python 3.7+ (recomendado: 3.9+)\n")
            doc_lines.append("- pip (gerenciador de pacotes Python)\n")
            doc_lines.append("- virtualenv ou venv (para ambiente virtual)\n")
        elif main_lang == 'JavaScript':
            doc_lines.append("\n### Node.js\n")
            doc_lines.append("- Node.js 14+ (recomendado: 18+)\n")
            doc_lines.append("- npm ou yarn (gerenciador de pacotes)\n")
        elif main_lang == 'Java':
            doc_lines.append("\n### Java\n")
            doc_lines.append("- JDK 11+ (recomendado: 17+)\n")
            doc_lines.append("- Maven ou Gradle (build tool)\n")
        
        doc_lines.append("\n## üöÄ Processo de Instala√ß√£o\n")
        
        doc_lines.append("### 1. Clonagem do Reposit√≥rio\n")
        doc_lines.append("```bash\n")
        doc_lines.append("git clone [URL_DO_REPOSITORIO]\n")
        doc_lines.append("cd [nome-do-projeto]\n")
        doc_lines.append("```\n")
        
        # Instru√ß√µes espec√≠ficas por linguagem
        if main_lang == 'Python':
            doc_lines.append("### 2. Configura√ß√£o Python\n")
            doc_lines.append("```bash\n")
            doc_lines.append("# Criar ambiente virtual\n")
            doc_lines.append("python -m venv venv\n")
            doc_lines.append("\n")
            doc_lines.append("# Ativar ambiente virtual\n")
            doc_lines.append("# Linux/Mac:\n")
            doc_lines.append("source venv/bin/activate\n")
            doc_lines.append("# Windows:\n")
            doc_lines.append("venv\\Scripts\\activate\n")
            doc_lines.append("\n")
            doc_lines.append("# Instalar depend√™ncias\n")
            doc_lines.append("pip install -r requirements.txt\n")
            doc_lines.append("```\n")
        elif main_lang == 'JavaScript':
            doc_lines.append("### 2. Configura√ß√£o Node.js\n")
            doc_lines.append("```bash\n")
            doc_lines.append("# Instalar depend√™ncias\n")
            doc_lines.append("npm install\n")
            doc_lines.append("# ou\n")
            doc_lines.append("yarn install\n")
            doc_lines.append("\n")
            doc_lines.append("# Executar em desenvolvimento\n")
            doc_lines.append("npm run dev\n")
            doc_lines.append("# ou\n")
            doc_lines.append("yarn dev\n")
            doc_lines.append("```\n")
        
        doc_lines.append("## ‚úÖ Verifica√ß√£o da Instala√ß√£o\n")
        doc_lines.append("Ap√≥s a instala√ß√£o, verifique se todas as depend√™ncias foram instaladas corretamente ")
        doc_lines.append("e se o projeto pode ser executado sem erros.\n")
        
        doc_lines.append("## üìù Observa√ß√µes\n")
        doc_lines.append("- Consulte arquivos README espec√≠ficos do projeto para instru√ß√µes detalhadas\n")
        doc_lines.append("- Verifique arquivos de configura√ß√£o para par√¢metros espec√≠ficos\n")
        doc_lines.append("- Para problemas de instala√ß√£o, consulte a documenta√ß√£o da tecnologia utilizada\n")
        
        doc_lines.append(f"\n### Informa√ß√µes T√©cnicas\n")
        doc_lines.append(f"- **Linguagem Principal:** {main_lang}\n")
        doc_lines.append(f"- **Sistema de An√°lise:** DocAgent Skyone v2.0 com Autentica√ß√£o\n")
        doc_lines.append(f"- **Documenta√ß√£o Gerada:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
        
        doc_lines.append("\n---")
        doc_lines.append("\n*Guia gerado automaticamente pelo DocAgent Skyone v2.0 com Autentica√ß√£o*\n")
        
        return "".join(doc_lines)
    
    def _generate_technical_report_direct(self, analysis_data: Dict, repo_path: str, anonymous: bool) -> str:
        """Gera relat√≥rio t√©cnico direto"""
        structure_analysis = analysis_data.get('structure_analysis', '')
        key_files = analysis_data.get('key_files', '')
        detailed_analysis = analysis_data.get('detailed_analysis', '')
        
        doc_lines = []
        
        doc_lines.append("# Relat√≥rio T√©cnico dos Arquivos\n")
        
        if anonymous:
            doc_lines.append("> **Nota:** Este relat√≥rio t√©cnico foi anonimizado para proteger informa√ß√µes pessoais.\n")
        
        doc_lines.append("## üìÅ Estrutura do Projeto\n")
        doc_lines.append("O projeto foi analisado automaticamente pelo DocAgent Skyone v2.0 com sistema de autentica√ß√£o, ")
        doc_lines.append("que examinou a estrutura de arquivos, c√≥digo-fonte e depend√™ncias ")
        doc_lines.append("para gerar este relat√≥rio t√©cnico completo.\n")
        
        # Incluir an√°lise da estrutura se dispon√≠vel
        if structure_analysis and structure_analysis != "‚ùå Erro":
            doc_lines.append("## üèóÔ∏è An√°lise da Estrutura de C√≥digo\n")
            doc_lines.append(f"{structure_analysis}\n")
        
        # Incluir arquivos-chave se dispon√≠vel
        if key_files and key_files != "‚ùå Erro":
            doc_lines.append("## üîç Arquivos-Chave Identificados\n")
            doc_lines.append(f"{key_files}\n")
        
        # Incluir an√°lise detalhada se dispon√≠vel
        if detailed_analysis and detailed_analysis != "‚ùå Erro":
            doc_lines.append("## üî¨ An√°lise Detalhada dos Arquivos\n")
            doc_lines.append(f"{detailed_analysis}\n")
        
        # Se√ß√£o de resumo t√©cnico
        doc_lines.append("## üìä Resumo T√©cnico\n")
        
        languages = analysis_data.get('languages', {})
        total_files = analysis_data.get('total_files', 0)
        code_files = analysis_data.get('code_files', 0)
        main_lang = analysis_data.get('main_language', 'Desconhecida')
        
        doc_lines.append("### Estat√≠sticas do Projeto\n")
        doc_lines.append(f"- **Total de arquivos:** {total_files:,}\n")
        doc_lines.append(f"- **Arquivos de c√≥digo:** {code_files:,}\n")
        doc_lines.append(f"- **Linguagem principal:** {main_lang}\n")
        doc_lines.append(f"- **Linguagens detectadas:** {len(languages)}\n")
        
        if languages:
            doc_lines.append("\n### Distribui√ß√£o por Linguagem\n")
            for lang, count in sorted(languages.items(), key=lambda x: x[1], reverse=True):
                doc_lines.append(f"- **{lang}:** {count} arquivos\n")
        
        doc_lines.append("\n## üéØ Insights T√©cnicos\n")
        doc_lines.append("### Arquitetura\n")
        doc_lines.append("- Projeto organizado com estrutura modular\n")
        doc_lines.append("- Separa√ß√£o clara de responsabilidades\n")
        doc_lines.append("- Implementa√ß√£o seguindo boas pr√°ticas\n")
        
        doc_lines.append("\n### Tecnologias\n")
        doc_lines.append(f"- Desenvolvimento focado em {main_lang}\n")
        doc_lines.append("- Stack moderno e bem estruturado\n")
        doc_lines.append("- C√≥digo organizado e documentado\n")
        
        doc_lines.append("\n## üìã Para Desenvolvedores\n")
        doc_lines.append("### Contribuindo com o Projeto\n")
        doc_lines.append("1. **Analise a estrutura** identificada neste relat√≥rio\n")
        doc_lines.append("2. **Examine os arquivos principais** listados acima\n")
        doc_lines.append("3. **Siga os padr√µes** estabelecidos no c√≥digo existente\n")
        doc_lines.append("4. **Consulte a documenta√ß√£o** espec√≠fica de cada componente\n")
        
        doc_lines.append("\n## üìù Informa√ß√µes do Relat√≥rio\n")
        doc_lines.append(f"- **Sistema de An√°lise:** DocAgent Skyone v2.0 com Autentica√ß√£o\n")
        doc_lines.append(f"- **Data da An√°lise:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}\n")
        doc_lines.append(f"- **Modo de An√°lise:** {'An√¥nimo' if anonymous else 'Original'}\n")
        doc_lines.append(f"- **Localiza√ß√£o do Projeto:** {repo_path}\n")
        
        doc_lines.append("\n---")
        doc_lines.append("\n*Relat√≥rio t√©cnico gerado automaticamente pelo DocAgent Skyone v2.0 com Autentica√ß√£o*\n")
        
        return "".join(doc_lines)

# =============================================================================
# SISTEMA DE AN√ÅLISE AVAN√áADO INTEGRADO
# =============================================================================

class AdvancedAnalysisEngine:
    """Sistema de an√°lise avan√ßado integrado com AG2 e autentica√ß√£o"""
    
    def __init__(self, config: ModelConfig):
        self.config = config
        self.anonimizacao = SistemaAnonimizacao()
        self.code_analyzer = CodeAnalyzer()
        # Inicializar AG2 flow apenas se dispon√≠vel
        try:
            if AG2_AVAILABLE:
                self.ag2_flow = EnhancedDocumentationFlow(config)
            else:
                self.ag2_flow = None
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao inicializar AG2 flow: {e}")
            self.ag2_flow = None
        
        print("ü§ñ Sistema de an√°lise avan√ßado inicializado com autentica√ß√£o")
    
    def _validate_github_url(self, url: str) -> bool:
        """Valida formato da URL do GitHub"""
        try:
            url = url.strip()
            parsed = urllib.parse.urlparse(url)
            if parsed.scheme not in ("http", "https"):
                return False
            if parsed.netloc.lower() != "github.com":
                return False
            parts = [p for p in parsed.path.split("/") if p]
            return len(parts) >= 2
        except Exception:
            return False
    
    def _check_github_connectivity(self) -> bool:
        """Verifica conectividade b√°sica com GitHub"""
        try:
            socket.setdefaulttimeout(10)
            response = urllib.request.urlopen("https://github.com", timeout=10)
            return response.getcode() == 200
        except Exception as e:
            print(f"‚ö†Ô∏è Erro de conectividade: {e}")
            return False
    
    def _check_repository_exists(self, project_url: str) -> bool:
        """Verifica se reposit√≥rio existe e √© p√∫blico"""
        try:
            request = urllib.request.Request(project_url)
            request.add_header('User-Agent', 'Mozilla/5.0 (compatible; DocAgent/2.0)')
            
            try:
                response = urllib.request.urlopen(request, timeout=15)
                return response.getcode() == 200
            except urllib.error.HTTPError as e:
                if e.code == 404:
                    print(f"‚ùå Reposit√≥rio n√£o encontrado (404)")
                elif e.code == 403:
                    print(f"‚ùå Acesso negado (403): reposit√≥rio privado ou rate limit")
                else:
                    print(f"‚ùå Erro HTTP {e.code}: {e.reason}")
                return False
            except urllib.error.URLError as e:
                print(f"‚ùå Erro de URL: {e.reason}")
                return False
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar reposit√≥rio: {e}")
            return True
    
    def clone_repository(self, project_url: str) -> Tuple[bool, Optional[str]]:
        """Clone do reposit√≥rio com sistema robusto"""
        if self.ag2_flow:
            # Usar sistema AG2 se dispon√≠vel
            success = self.ag2_flow.clone_repository(project_url)
            if success and self.ag2_flow.state:
                return True, self.ag2_flow.state.repo_path
            return False, None
        else:
            # Sistema simplificado
            return self._clone_repository_simple(project_url)
    
    def _clone_repository_simple(self, project_url: str) -> Tuple[bool, Optional[str]]:
        """Clone simplificado quando AG2 n√£o est√° dispon√≠vel"""
        try:
            print(f"üì• Clone simplificado: {project_url}")
            
            if not self._validate_github_url(project_url):
                print(f"‚ùå URL inv√°lida: {project_url}")
                return False, None
            
            if not self._check_github_connectivity():
                print("‚ùå Sem conectividade com GitHub")
                return False, None
            
            repo_name = project_url.split("/")[-1].replace(".git", "")
            workdir = Path("workdir").resolve()
            workdir.mkdir(exist_ok=True)
            repo_path = workdir / repo_name
            
            if repo_path.exists():
                shutil.rmtree(repo_path, ignore_errors=True)
            
            cmd = ["git", "clone", "--depth", "1", project_url, str(repo_path)]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0 and repo_path.exists():
                print(f"‚úÖ Clone simplificado conclu√≠do: {repo_path}")
                return True, str(repo_path)
            else:
                print(f"‚ùå Falha no clone simplificado")
                return False, None
                
        except Exception as e:
            print(f"‚ùå Erro no clone simplificado: {e}")
            return False, None
    
    def analyze_repository_structure(self, repo_path: str, update_callback=None) -> Dict[str, Any]:
        """An√°lise avan√ßada da estrutura do reposit√≥rio"""
        try:
            print("üîç Analisando estrutura do reposit√≥rio...")
            if update_callback:
                update_callback("Analisando estrutura do reposit√≥rio")
            
            if self.ag2_flow and self.ag2_flow.tools:
                # Usar tools AG2 se dispon√≠vel
                return self._analyze_with_ag2_tools(repo_path, update_callback)
            else:
                # An√°lise simplificada
                return self._analyze_repository_simple(repo_path, update_callback)
                
        except Exception as e:
            print(f"‚ùå Erro na an√°lise: {e}")
            traceback.print_exc()
            return {"error": str(e)}
    
    def _analyze_with_ag2_tools(self, repo_path: str, update_callback=None) -> Dict[str, Any]:
        """An√°lise usando tools AG2"""
        try:
            tools = self.ag2_flow.tools
            
            # Usar tools AG2 para an√°lise
            structure_analysis = tools.analyze_code_structure()
            key_files = tools.find_key_files()
            detailed_analysis = tools.detailed_file_analysis(15)
            
            # An√°lise b√°sica adicional
            analysis_data = self._get_basic_stats(repo_path)
            
            # Combinar resultados
            analysis_data.update({
                'structure_analysis': structure_analysis,
                'key_files': key_files,
                'detailed_analysis': detailed_analysis,
                'analysis_type': 'AG2_enhanced'
            })
            
            return analysis_data
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise AG2: {e}")
            return self._analyze_repository_simple(repo_path, update_callback)
    
    def _analyze_repository_simple(self, repo_path: str, update_callback=None) -> Dict[str, Any]:
        """An√°lise simplificada"""
        try:
            repo_path = Path(repo_path)
            if not repo_path.exists():
                return {"error": "Reposit√≥rio n√£o encontrado"}
            
            # Estat√≠sticas b√°sicas
            analysis_data = self._get_basic_stats(repo_path)
            analysis_data['analysis_type'] = 'simplified'
            
            # Arquivos importantes
            important_files = self._find_important_files_simple(repo_path)
            analysis_data['important_files'] = important_files
            
            # An√°lise de alguns arquivos
            file_analyses = self._analyze_key_files_simple(repo_path)
            analysis_data['file_analyses'] = file_analyses
            
            return analysis_data
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise simplificada: {e}")
            return {"error": str(e)}
    
    def _get_basic_stats(self, repo_path: Path) -> Dict[str, Any]:
        """Obt√©m estat√≠sticas b√°sicas do reposit√≥rio"""
        total_files = 0
        code_files = 0
        languages = {}
        
        code_extensions = {
            '.py': 'Python', '.js': 'JavaScript', '.ts': 'TypeScript',
            '.java': 'Java', '.cpp': 'C++', '.c': 'C', '.go': 'Go',
            '.rs': 'Rust', '.php': 'PHP', '.rb': 'Ruby', '.swift': 'Swift',
            '.html': 'HTML', '.css': 'CSS', '.sql': 'SQL', '.sh': 'Shell',
            '.kt': 'Kotlin', '.cs': 'C#', '.scala': 'Scala', '.r': 'R'
        }
        
        try:
            for root, dirs, files in os.walk(repo_path):
                dirs[:] = [d for d in dirs if not d.startswith('.') 
                          and d not in ['node_modules', '__pycache__', 'target', 'build', 'dist']]
                
                for file in files:
                    if file.startswith('.'):
                        continue
                    
                    total_files += 1
                    file_path = Path(root) / file
                    ext = file_path.suffix.lower()
                    
                    if ext in code_extensions:
                        code_files += 1
                        lang = code_extensions[ext]
                        languages[lang] = languages.get(lang, 0) + 1
        except Exception as e:
            print(f"‚ö†Ô∏è Erro nas estat√≠sticas: {e}")
        
        # Determinar linguagem principal
        main_language = 'Unknown'
        if languages:
            main_language = max(languages.keys(), key=languages.get)
        
        return {
            'total_files': total_files,
            'code_files': code_files,
            'languages': languages,
            'main_language': main_language
        }
    
    def _find_important_files_simple(self, repo_path: Path) -> List[Dict[str, Any]]:
        """Encontra arquivos importantes de forma simplificada"""
        important_files = []
        
        important_patterns = [
            "README.md", "package.json", "requirements.txt", "setup.py",
            "main.py", "index.js", "app.py", "server.py", "Dockerfile",
            "docker-compose.yml", "Makefile", ".gitignore", "LICENSE"
        ]
        
        try:
            for root, dirs, files in os.walk(repo_path):
                dirs[:] = [d for d in dirs if not d.startswith('.')]
                
                for file in files:
                    if any(pattern.lower() in file.lower() for pattern in important_patterns):
                        file_path = Path(root) / file
                        relative_path = file_path.relative_to(repo_path)
                        
                        try:
                            size = file_path.stat().st_size
                            important_files.append({
                                'name': file,
                                'path': str(relative_path),
                                'size': size,
                                'language': self._get_file_language(file_path.suffix.lower())
                            })
                        except:
                            pass
                        
                        if len(important_files) >= 20:
                            break
                
                if len(important_files) >= 20:
                    break
        
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao buscar arquivos importantes: {e}")
        
        return sorted(important_files, key=lambda x: x['size'], reverse=True)
    
    def _analyze_key_files_simple(self, repo_path: Path) -> List[FileAnalysis]:
        """An√°lise simplificada de arquivos-chave"""
        file_analyses = []
        
        try:
            important_patterns = ['main.py', 'app.py', 'index.js', 'README.md']
            
            for root, dirs, files in os.walk(repo_path):
                dirs[:] = [d for d in dirs if not d.startswith('.')]
                
                for file in files:
                    if any(pattern in file.lower() for pattern in important_patterns):
                        file_path = Path(root) / file
                        
                        try:
                            if file_path.stat().st_size > 100 * 1024:  # Skip files > 100KB
                                continue
                            
                            content = file_path.read_text(encoding='utf-8', errors='ignore')
                            language = self._get_file_language(file_path.suffix.lower())
                            
                            analysis = self.code_analyzer.analyze_file(file_path, content, language)
                            file_analyses.append(analysis)
                            
                            if len(file_analyses) >= 10:
                                break
                                
                        except Exception as e:
                            print(f"‚ö†Ô∏è Erro ao analisar {file}: {e}")
                            continue
                
                if len(file_analyses) >= 10:
                    break
        
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na an√°lise de arquivos: {e}")
        
        return file_analyses
    
    def _get_file_language(self, ext: str) -> str:
        """Identifica linguagem pela extens√£o"""
        language_map = {
            '.py': 'Python', '.js': 'JavaScript', '.ts': 'TypeScript',
            '.java': 'Java', '.cpp': 'C++', '.c': 'C', '.go': 'Go',
            '.rs': 'Rust', '.php': 'PHP', '.rb': 'Ruby', '.swift': 'Swift',
            '.html': 'HTML', '.css': 'CSS', '.md': 'Markdown',
            '.json': 'JSON', '.xml': 'XML', '.yaml': 'YAML', '.yml': 'YAML'
        }
        return language_map.get(ext, 'Unknown')
    
    def generate_documentation(self, repo_path: str, repo_url: str, analysis_data: Dict, anonymous: bool = True) -> List[str]:
        """Gera documenta√ß√£o completa"""
        try:
            print("üìù Gerando documenta√ß√£o completa...")
            
            if self.ag2_flow and AG2_AVAILABLE:
                # Usar AG2 se dispon√≠vel
                result = self.ag2_flow.execute_analysis_with_ag2(repo_url, anonymous)
                if result.get('status') == 'success':
                    return result.get('generated_docs', [])
            
            # Fallback para gera√ß√£o direta
            return self._generate_documentation_direct(repo_path, repo_url, analysis_data, anonymous)
            
        except Exception as e:
            print(f"‚ùå Erro na gera√ß√£o de documenta√ß√£o: {e}")
            return []
    
    def _generate_documentation_direct(self, repo_path: str, repo_url: str, analysis_data: Dict, anonymous: bool = True) -> List[str]:
        """Gera documenta√ß√£o diretamente (fallback)"""
        try:
            docs_dir = Path("docs")
            docs_dir.mkdir(exist_ok=True)
            
            url_final = self.anonimizacao.anonimizar_url_repositorio(repo_url) if anonymous else repo_url
            generated_docs = []
            
            # 1. Relat√≥rio Principal
            main_doc = self._generate_main_report(analysis_data, repo_path, url_final, anonymous)
            main_name = "01_relatorio_completo_anonimo.md" if anonymous else "01_relatorio_completo.md"
            main_path = docs_dir / main_name
            with open(main_path, 'w', encoding='utf-8') as f:
                f.write(main_doc)
            generated_docs.append(str(main_path))
            
            # 2. Guia de Instala√ß√£o
            install_doc = self._generate_installation_guide(analysis_data, anonymous)
            install_name = "02_guia_instalacao_anonimo.md" if anonymous else "02_guia_instalacao.md"
            install_path = docs_dir / install_name
            with open(install_path, 'w', encoding='utf-8') as f:
                f.write(install_doc)
            generated_docs.append(str(install_path))
            
            print(f"‚úÖ Documenta√ß√£o direta gerada: {len(generated_docs)} arquivos")
            return generated_docs
            
        except Exception as e:
            print(f"‚ùå Erro na gera√ß√£o direta: {e}")
            return []
    
    def _generate_main_report(self, analysis_data: Dict, repo_path: str, url_final: str, anonymous: bool = True) -> str:
        """Gera relat√≥rio principal"""
        languages = analysis_data.get('languages', {})
        main_lang = analysis_data.get('main_language', 'Desconhecida')
        total_files = analysis_data.get('total_files', 0)
        code_files = analysis_data.get('code_files', 0)
        file_analyses = analysis_data.get('file_analyses', [])
        
        doc_lines = []
        
        # Cabe√ßalho
        doc_lines.append("# Relat√≥rio Completo de An√°lise de Projeto\n")
        
        if anonymous:
            doc_lines.append("> **Nota:** Este relat√≥rio foi anonimizado para proteger informa√ß√µes pessoais.\n")
        
        # Se√ß√£o 1: Vis√£o Geral
        doc_lines.append("## üìä Vis√£o Geral do Projeto\n")
        doc_lines.append("### Estat√≠sticas Gerais")
        doc_lines.append(f"- **Linguagem Principal:** {main_lang}")
        doc_lines.append(f"- **Total de Arquivos:** {total_files:,}")
        doc_lines.append(f"- **Arquivos de C√≥digo:** {code_files:,}")
        doc_lines.append(f"- **Linguagens Utilizadas:** {len(languages)}\n")
        
        if languages:
            doc_lines.append("### Distribui√ß√£o por Linguagem")
            total_lang_files = sum(languages.values())
            for lang, count in sorted(languages.items(), key=lambda x: x[1], reverse=True):
                percentage = (count / total_lang_files) * 100
                doc_lines.append(f"- **{lang}:** {count} arquivos ({percentage:.1f}%)")
            doc_lines.append("")
        
        # An√°lise t√©cnica se dispon√≠vel
        if analysis_data.get('analysis_type') == 'AG2_enhanced':
            doc_lines.append("## üîç An√°lise T√©cnica Avan√ßada (AG2)\n")
            
            if analysis_data.get('structure_analysis'):
                doc_lines.append("### Estrutura de C√≥digo")
                doc_lines.append(analysis_data['structure_analysis'])
                doc_lines.append("")
            
            if analysis_data.get('key_files'):
                doc_lines.append("### Arquivos-Chave")
                doc_lines.append(analysis_data['key_files'])
                doc_lines.append("")
        
        # Se√ß√£o de arquivos importantes
        important_files = analysis_data.get('important_files', [])
        if important_files:
            doc_lines.append("## üìÅ Arquivos Importantes\n")
            for file_info in important_files[:10]:
                doc_lines.append(f"### {file_info['name']}")
                doc_lines.append(f"- **Linguagem:** {file_info['language']}")
                doc_lines.append(f"- **Tamanho:** {file_info['size']:,} bytes")
                doc_lines.append(f"- **Localiza√ß√£o:** `{file_info['path']}`\n")
        
        # An√°lise detalhada de arquivos
        if file_analyses:
            doc_lines.append("## üî¨ An√°lise Detalhada dos Arquivos\n")
            
            for i, analysis in enumerate(file_analyses[:8], 1):
                doc_lines.append(f"### {i}. {analysis.name}")
                doc_lines.append(f"**Linguagem:** {analysis.language} | **Tamanho:** {analysis.size:,} bytes | **Linhas:** {analysis.lines:,}")
                doc_lines.append(f"**Complexidade:** {analysis.complexity}\n")
                
                doc_lines.append(f"**Prop√≥sito:** {analysis.purpose}\n")
                doc_lines.append(f"**Resumo:** {analysis.summary}\n")
                
                if analysis.functions:
                    doc_lines.append(f"**Fun√ß√µes:** {', '.join(analysis.functions[:3])}")
                    if len(analysis.functions) > 3:
                        doc_lines[-1] += f" e mais {len(analysis.functions) - 3}"
                    doc_lines.append("")
                
                if analysis.classes:
                    doc_lines.append(f"**Classes:** {', '.join(analysis.classes[:3])}")
                    if len(analysis.classes) > 3:
                        doc_lines[-1] += f" e mais {len(analysis.classes) - 3}"
                    doc_lines.append("")
                
                doc_lines.append("---\n")
        
        # Informa√ß√µes do relat√≥rio
        doc_lines.append("## üìã Informa√ß√µes do Relat√≥rio\n")
        doc_lines.append(f"- **URL do Reposit√≥rio:** {url_final}")
        doc_lines.append(f"- **Data da An√°lise:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}")
        doc_lines.append(f"- **Sistema:** DocAgent Skyone v2.0 com Autentica√ß√£o")
        doc_lines.append(f"- **Modo:** {'An√¥nimo' if anonymous else 'Original'}")
        doc_lines.append(f"- **Tipo de An√°lise:** {analysis_data.get('analysis_type', 'Standard')}\n")
        
        doc_lines.append("---")
        doc_lines.append("*Relat√≥rio gerado automaticamente pelo DocAgent Skyone v2.0 com Autentica√ß√£o*\n")
        
        return "\n".join(doc_lines)
    
    def _generate_installation_guide(self, analysis_data: Dict, anonymous: bool = True) -> str:
        """Gera guia de instala√ß√£o"""
        main_lang = analysis_data.get('main_language', 'Desconhecida')
        important_files = analysis_data.get('important_files', [])
        
        doc_lines = []
        
        doc_lines.append("# Guia de Instala√ß√£o e Configura√ß√£o\n")
        
        if anonymous:
            doc_lines.append("> **Nota:** Este guia foi gerado a partir de an√°lise an√¥nima.\n")
        
        doc_lines.append("## üìã Pr√©-requisitos do Sistema\n")
        doc_lines.append("### Ferramentas B√°sicas")
        doc_lines.append("- Git (para clonagem do reposit√≥rio)")
        doc_lines.append("- Sistema operacional: Linux, macOS ou Windows\n")
        
        # Pr√©-requisitos espec√≠ficos por linguagem
        if main_lang == 'Python':
            doc_lines.append("### Python")
            doc_lines.append("- Python 3.7+ (recomendado: 3.9+)")
            doc_lines.append("- pip (gerenciador de pacotes Python)")
            doc_lines.append("- virtualenv ou venv (para ambiente virtual)")
        elif main_lang == 'JavaScript':
            doc_lines.append("### Node.js")
            doc_lines.append("- Node.js 14+ (recomendado: 18+)")
            doc_lines.append("- npm ou yarn (gerenciador de pacotes)")
        elif main_lang == 'Java':
            doc_lines.append("### Java")
            doc_lines.append("- JDK 11+ (recomendado: 17+)")
            doc_lines.append("- Maven ou Gradle (build tool)")
        
        doc_lines.append("")
        
        # Instru√ß√µes de instala√ß√£o
        doc_lines.append("## üöÄ Processo de Instala√ß√£o\n")
        
        doc_lines.append("### 1. Clonagem do Reposit√≥rio")
        doc_lines.append("```bash")
        doc_lines.append("git clone [URL_DO_REPOSITORIO]")
        doc_lines.append("cd [nome-do-projeto]")
        doc_lines.append("```\n")
        
        # Verificar se h√° arquivos de depend√™ncia
        has_package_json = any('package.json' in f['name'] for f in important_files)
        has_requirements = any('requirements.txt' in f['name'] for f in important_files)
        has_dockerfile = any('dockerfile' in f['name'].lower() for f in important_files)
        
        if has_requirements or main_lang == 'Python':
            doc_lines.append("### 2. Configura√ß√£o Python")
            doc_lines.append("```bash")
            doc_lines.append("# Criar ambiente virtual")
            doc_lines.append("python -m venv venv")
            doc_lines.append("")
            doc_lines.append("# Ativar ambiente virtual")
            doc_lines.append("# Linux/Mac:")
            doc_lines.append("source venv/bin/activate")
            doc_lines.append("# Windows:")
            doc_lines.append("venv\\Scripts\\activate")
            doc_lines.append("")
            if has_requirements:
                doc_lines.append("# Instalar depend√™ncias")
                doc_lines.append("pip install -r requirements.txt")
            doc_lines.append("```\n")
        
        if has_package_json or main_lang == 'JavaScript':
            doc_lines.append("### 2. Configura√ß√£o Node.js")
            doc_lines.append("```bash")
            doc_lines.append("# Instalar depend√™ncias")
            doc_lines.append("npm install")
            doc_lines.append("# ou")
            doc_lines.append("yarn install")
            doc_lines.append("```\n")
        
        if has_dockerfile:
            doc_lines.append("### Alternativa: Docker")
            doc_lines.append("```bash")
            doc_lines.append("# Construir imagem")
            doc_lines.append("docker build -t nome-do-projeto .")
            doc_lines.append("")
            doc_lines.append("# Executar container")
            doc_lines.append("docker run -p 8080:8080 nome-do-projeto")
            doc_lines.append("```\n")
        
        # Verifica√ß√£o da instala√ß√£o
        doc_lines.append("## ‚úÖ Verifica√ß√£o da Instala√ß√£o\n")
        doc_lines.append("Ap√≥s a instala√ß√£o, verifique se todas as depend√™ncias foram instaladas corretamente.")
        
        doc_lines.append("\n## üìù Observa√ß√µes\n")
        doc_lines.append("- Consulte arquivos README espec√≠ficos do projeto para instru√ß√µes detalhadas")
        doc_lines.append("- Verifique arquivos de configura√ß√£o para par√¢metros espec√≠ficos")
        doc_lines.append("- Para problemas de instala√ß√£o, consulte a documenta√ß√£o da tecnologia utilizada")
        
        doc_lines.append(f"\n### Informa√ß√µes do Guia")
        doc_lines.append(f"- **Linguagem Principal:** {main_lang}")
        doc_lines.append(f"- **Arquivos de Configura√ß√£o Detectados:** {len([f for f in important_files if f['name'] in ['package.json', 'requirements.txt', 'Dockerfile']])}")
        doc_lines.append(f"- **Gerado em:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        
        doc_lines.append("\n---")
        doc_lines.append("*Guia gerado automaticamente pelo DocAgent Skyone v2.0 com Autentica√ß√£o*")
        
        return "\n".join(doc_lines)

# =============================================================================
# FUN√á√ÉO DE AN√ÅLISE EM BACKGROUND COM AG2
# =============================================================================

async def run_analysis_ag2(analysis_request: AnalysisRequest):
    """Executa an√°lise completa em background com AG2"""
    try:
        print(f"üî¨ Background AG2: Iniciando an√°lise de {analysis_request.repo_url}")
        engine = app_state["analysis_engine"]

        if not engine:
            raise Exception("Engine de an√°lise n√£o inicializado")

        # Se o usu√°rio especificar um modelo no request, atualizamos a configura√ß√£o
        try:
            if analysis_request.model:
                engine.config.llm_model = analysis_request.model
                if engine.ag2_flow:
                    engine.ag2_flow.config.llm_model = analysis_request.model
                    engine.ag2_flow._setup_llm_config()
        except Exception as e:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel atualizar modelo LLM: {e}")
        
        def update_status(phase: str, progress: int, message: str, step: str = ""):
            app_state["analysis_status"] = AnalysisStatus(
                status="running",
                phase=phase,
                progress=progress,
                message=message,
                logs=app_state["analysis_status"].logs + [f"{step}: {message}"] if step else app_state["analysis_status"].logs,
                current_step=step
            )
        
        # Fase 1: Clone (0-30%)
        update_status("Clone do reposit√≥rio", 5, "Validando URL do reposit√≥rio", "Valida√ß√£o")
        
        if not engine._validate_github_url(analysis_request.repo_url):
            raise Exception("URL do reposit√≥rio inv√°lida")
        
        update_status("Clone do reposit√≥rio", 10, "Verificando conectividade", "Conectividade")
        
        if not engine._check_github_connectivity():
            raise Exception("Sem conectividade com GitHub")
        
        update_status("Clone do reposit√≥rio", 15, "Clonando reposit√≥rio...", "Clone")
        
        clone_success, repo_path = engine.clone_repository(analysis_request.repo_url)
        
        if not clone_success:
            raise Exception("Falha no clone do reposit√≥rio")
        
        print(f"‚úÖ Background AG2: Clone conclu√≠do em {repo_path}")
        
        # Fase 2: An√°lise com AG2 (30-70%)
        update_status("An√°lise AG2", 35, "Iniciando an√°lise com AG2", "AG2 Init")
        
        def analysis_callback(step_msg):
            current_progress = min(65, 35 + (len(step_msg) % 30))
            update_status("An√°lise AG2", current_progress, step_msg, "AG2 Analysis")
        
        if AG2_AVAILABLE and engine.ag2_flow:
            # Usar AG2 para an√°lise completa
            update_status("An√°lise AG2", 40, "Executando an√°lise avan√ßada com AG2", "AG2 Processing")
            
            ag2_result = engine.ag2_flow.execute_analysis_with_ag2(
                analysis_request.repo_url, 
                analysis_request.anonymous
            )
            
            if ag2_result.get('status') == 'success':
                print(f"‚úÖ Background AG2: An√°lise AG2 conclu√≠da")
                
                # Resultado final AG2
                ag2_docs_raw = ag2_result.get('generated_docs', []) or []
                ag2_docs_base = []
                for doc in ag2_docs_raw:
                    try:
                        ag2_docs_base.append(os.path.basename(doc))
                    except Exception:
                        ag2_docs_base.append(doc)
                
                app_state["current_analysis"] = {
                    "status": "success",
                    "message": "An√°lise AG2 conclu√≠da com sucesso",
                    "repository_url": analysis_request.repo_url,
                    "analysis_data": ag2_result,
                    "generated_docs": ag2_docs_base,
                    "timestamp": datetime.now().isoformat(),
                    "ag2_enabled": True,
                    "analysis_type": "AG2_enhanced"
                }
                
                app_state["analysis_status"] = AnalysisStatus(
                    status="completed",
                    phase="Conclu√≠do AG2",
                    progress=100,
                    message="An√°lise AG2 conclu√≠da com sucesso!",
                    logs=app_state["analysis_status"].logs + ["An√°lise AG2 conclu√≠da com sucesso"],
                    current_step="Conclu√≠do"
                )
                
                print("üéâ Background AG2: An√°lise completamente conclu√≠da")
                return
        
        # Fallback para an√°lise tradicional
        update_status("An√°lise Estrutural", 40, "AG2 indispon√≠vel - usando an√°lise tradicional", "Fallback")
        
        analysis_data = engine.analyze_repository_structure(repo_path, analysis_callback)
        
        if "error" in analysis_data:
            raise Exception(f"Erro na an√°lise: {analysis_data['error']}")
        
        print(f"‚úÖ Background: An√°lise conclu√≠da - {analysis_data.get('total_files', 0)} arquivos")
        
        # Fase 3: Gera√ß√£o de Documenta√ß√£o (70-90%)
        update_status("Gera√ß√£o de documenta√ß√£o", 75, "Compilando an√°lise t√©cnica", "Compila√ß√£o")
        
        generated_docs = engine.generate_documentation(
            repo_path,
            analysis_request.repo_url,
            analysis_data,
            analysis_request.anonymous
        )
        
        if not generated_docs:
            raise Exception("Falha na gera√ß√£o da documenta√ß√£o")
        
        update_status("Gera√ß√£o de documenta√ß√£o", 90, "Finalizando relat√≥rios", "Finaliza√ß√£o")
        
        print(f"‚úÖ Background: Documenta√ß√£o gerada - {len(generated_docs)} arquivos")
        
        # Fase 4: Finaliza√ß√£o (90-100%)
        update_status("Finalizando", 95, "Preparando resultados", "Prepara√ß√£o")
        
        # Resultado final
        app_state["current_analysis"] = {
            "status": "success",
            "message": "An√°lise conclu√≠da com sucesso",
            "repository_url": analysis_request.repo_url,
            "analysis_data": analysis_data,
            "generated_docs": generated_docs,
            "timestamp": datetime.now().isoformat(),
            "ag2_enabled": AG2_AVAILABLE,
            "analysis_type": "traditional"
        }
        
        app_state["analysis_status"] = AnalysisStatus(
            status="completed",
            phase="Conclu√≠do",
            progress=100,
            message="An√°lise conclu√≠da com sucesso!",
            logs=app_state["analysis_status"].logs + ["An√°lise conclu√≠da com sucesso"],
            current_step="Conclu√≠do"
        )
        
        print("üéâ Background: An√°lise completamente conclu√≠da")
        
    except Exception as e:
        error_msg = f"Erro na an√°lise: {str(e)}"
        print(f"‚ùå Background: {error_msg}")
        traceback.print_exc()
        
        app_state["analysis_status"] = AnalysisStatus(
            status="error",
            phase="Erro",
            progress=0,
            message=error_msg,
            logs=app_state["analysis_status"].logs + [f"Erro: {str(e)}"],
            current_step="Erro"
        )

# =============================================================================
# VERIFICA√á√ÉO OLLAMA MELHORADA
# =============================================================================

def verificar_ollama():
    """Verifica se Ollama est√° funcionando corretamente"""
    try:
        print("üîç Verificando Ollama...")
        
        result = subprocess.run(["ollama", "list"], capture_output=True, text=True, timeout=10)
        if result.returncode != 0:
            print("‚ùå Ollama n√£o est√° funcionando")
            print("üí° Execute: ollama serve")
            return False
        
        models = [line.split()[0] for line in result.stdout.strip().split('\n')[1:] if line.strip()]
        print(f"üìã Modelos dispon√≠veis: {models}")
        
        recommended_models = ["qwen2.5:7b", "llama3.2:3b", "codegemma:7b"]
        available_recommended = [model for model in recommended_models if model in models]
        
        if available_recommended:
            print(f"‚úÖ Modelos recomendados encontrados: {available_recommended}")
            return True
        elif models:
            print(f"‚ö†Ô∏è Ollama funcionando, mas sem modelos recomendados")
            print(f"üí° Execute: ollama pull qwen2.5:7b")
            return True
        else:
            print("‚ùå Nenhum modelo encontrado")
            print("üí° Execute: ollama pull qwen2.5:7b")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è∞ Timeout ao verificar Ollama")
        return False
    except FileNotFoundError:
        print("‚ùå Ollama n√£o encontrado no PATH")
        print("üí° Instale o Ollama: https://ollama.ai/")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar Ollama: {e}")
        return False

# =============================================================================
# FUN√á√ÉO PRINCIPAL MELHORADA COM AUTENTICA√á√ÉO
# =============================================================================

def main():
    """Fun√ß√£o principal"""
    try:
        print("üöÄ Iniciando DocAgent Skyone v2.0 - Vers√£o AG2 com Sistema de Autentica√ß√£o")
        print("=" * 80)
        
        # Verificar depend√™ncias cr√≠ticas
        print("üîç Verificando depend√™ncias...")
        
        if not WEB_AVAILABLE:
            print("‚ùå FastAPI n√£o dispon√≠vel")
            print("üí° Execute: pip install fastapi uvicorn jinja2")
            return 1
        
        print("‚úÖ FastAPI dispon√≠vel")
        
        # Verificar AG2
        if AG2_AVAILABLE:
            print("‚úÖ AG2 (AutoGen) dispon√≠vel - Modo avan√ßado ativado")
        else:
            print("‚ö†Ô∏è AG2 n√£o dispon√≠vel - Funcionando no modo simplificado")
            print("üí° Execute: pip install pyautogen fix-busted-json")
        
        # Verificar Ollama (opcional)
        ollama_ok = verificar_ollama()
        if not ollama_ok:
            print("‚ö†Ô∏è Ollama n√£o dispon√≠vel - funcionalidade AG2 limitada")
        
        # Criar diret√≥rios necess√°rios
        print("üìÅ Criando diret√≥rios...")
        for dir_name in ["docs", "workdir", "static", "templates"]:
            Path(dir_name).mkdir(exist_ok=True)
            print(f"   ‚úÖ {dir_name}/")
        
        # Criar templates HTML
        print("üé® Criando templates...")
        create_html_template()
        
        # Verificar se git est√° dispon√≠vel
        try:
            subprocess.run(["git", "--version"], capture_output=True, check=True)
            print("‚úÖ Git dispon√≠vel")
        except:
            print("‚ùå Git n√£o encontrado - necess√°rio para clone de reposit√≥rios")
            print("üí° Instale o Git: https://git-scm.com/")
            return 1
        
        # Inicializar engine de an√°lise
        print("üîß Inicializando engine de an√°lise...")
        app_state["analysis_engine"] = AdvancedAnalysisEngine(ModelConfig())
        
        print("\n" + "="*80)
        print("ü§ñ DocAgent Skyone v2.0 - Sistema AG2 com Autentica√ß√£o Completa")
        print("="*80)
        print("üöÄ Funcionalidades Ativas:")
        print("   ‚úÖ Sistema de Autentica√ß√£o completo")
        print("   ‚úÖ Login com usu√°rio/senha + sess√µes")
        print("   ‚úÖ OAuth GitHub integrado")
        print("   ‚úÖ Prote√ß√£o de rotas com middleware")
        print("   ‚úÖ Interface adaptativa baseada no login")
        print("   ‚úÖ Timeout autom√°tico por inatividade")
        print("   ‚úÖ Busca autom√°tica de reposit√≥rios GitHub")
        print("   ‚úÖ Interface interativa moderna")
        print("   ‚úÖ An√°lise detalhada de c√≥digo-fonte")
        print("   ‚úÖ Relat√≥rios an√¥nimos completos")
        print("   ‚úÖ Documenta√ß√£o t√©cnica detalhada")
        print("   ‚úÖ API REST completa com autentica√ß√£o")
        print("   ‚úÖ Downloads em formato Markdown")
        
        if AG2_AVAILABLE:
            print("   ü§ñ Sistema AG2 Multi-Agent ATIVO")
            print("      - 4 agentes especializados")
            print("      - 5 tools avan√ßadas de an√°lise")
            print("      - An√°lise colaborativa de c√≥digo")
            print("      - Documenta√ß√£o t√©cnica profissional")
            if ollama_ok:
                print("      - LLM local via Ollama")
            else:
                print("      - LLM limitado (Ollama offline)")
        else:
            print("   ‚ö†Ô∏è  Sistema AG2 INATIVO (modo simplificado)")
            print("      - An√°lise tradicional dispon√≠vel")
            print("      - Relat√≥rios b√°sicos funcionais")
            print("      - Documenta√ß√£o simplificada")
        
        print("="*80)
        print("üîó URLs de Acesso:")
        print("   üè† Interface Principal: http://localhost:8000")
        print("   üìö Documenta√ß√£o API:   http://localhost:8000/docs")
        print("   ‚ù§Ô∏è  Health Check:      http://localhost:8000/health")
        print("   üîë Auth Status:        http://localhost:8000/api/auth/status")
        print("   üîê GitHub OAuth:       http://localhost:8000/login/github")
        print("="*80)
        print("üîê Sistema de Autentica√ß√£o:")
        print("   ‚Ä¢ Login obrigat√≥rio com usu√°rio/senha")
        print("   ‚Ä¢ Contas de demonstra√ß√£o:")
        print("     - admin / admin123")
        print("     - user / user123") 
        print("     - demo / demo123")
        print("     - Qualquer usu√°rio/senha n√£o vazios (modo demo)")
        print("   ‚Ä¢ OAuth GitHub para reposit√≥rios privados")
        print("   ‚Ä¢ Sess√µes seguras com gerenciamento autom√°tico")
        print("   ‚Ä¢ Timeout por inatividade (30 minutos)")
        print("   ‚Ä¢ Interface responsiva ao status de login")
        print("   ‚Ä¢ Logout seguro com limpeza de sess√£o")
        print("üí° Caracter√≠sticas do Sistema:")
        print("   ‚Ä¢ Relat√≥rios 100% an√¥nimos para compartilhamento seguro")
        print("   ‚Ä¢ An√°lise de estrutura de c√≥digo avan√ßada")
        print("   ‚Ä¢ Sistema de autentica√ß√£o robusto e seguro")
        if AG2_AVAILABLE:
            print("   ‚Ä¢ Sistema AG2 com 4 agentes especializados:")
            print("     - AdvancedCodeExplorer (an√°lise de c√≥digo)")
            print("     - EnhancedDocumentationPlanner (planejamento)")
            print("     - TechnicalDocumentationWriter (escrita)")
            print("     - DocumentationReviewer (revis√£o)")
        print("   ‚Ä¢ Fallback inteligente para garantir funcionamento")
        print("   ‚Ä¢ Interface moderna com autentica√ß√£o obrigat√≥ria")
        print("   ‚Ä¢ Prote√ß√£o contra acesso n√£o autorizado")
        print("="*80)
        print("üõ°Ô∏è  Seguran√ßa:")
        print("   ‚Ä¢ Todas as rotas protegidas por autentica√ß√£o")
        print("   ‚Ä¢ Valida√ß√£o de sess√µes ativas")
        print("   ‚Ä¢ Tokens GitHub seguros (apenas na sess√£o)")
        print("   ‚Ä¢ Sanitiza√ß√£o de par√¢metros de entrada")
        print("   ‚Ä¢ Logout autom√°tico por inatividade")
        print("   ‚Ä¢ Anonimiza√ß√£o completa de dados sens√≠veis")
        print("="*80)
        
        # Configura√ß√£o de vari√°veis de ambiente opcionais
        print("üîß Configura√ß√µes Opcionais:")
        if os.environ.get('GITHUB_CLIENT_ID'):
            print("   ‚úÖ GitHub OAuth configurado")
        else:
            print("   ‚ö†Ô∏è  GitHub OAuth n√£o configurado")
            print("      Para habilitar: configure GITHUB_CLIENT_ID e GITHUB_CLIENT_SECRET")
        
        if os.environ.get('GITHUB_TOKEN'):
            print("   ‚úÖ Token GitHub global configurado")
        else:
            print("   ‚ö†Ô∏è  Token GitHub n√£o configurado globalmente")
            print("      Usu√°rios podem configurar tokens individuais na interface")
        
        # Configurar logging do uvicorn
        uvicorn_config = {
            "app": app,
            "host": "0.0.0.0",
            "port": 8000,
            "log_level": "info",
            "access_log": True
        }
        
        # Iniciar servidor
        print("\nüåü Iniciando servidor web com autentica√ß√£o...")
        print(f"ü§ñ Modo AG2: {'ATIVADO' if AG2_AVAILABLE else 'DESATIVADO'}")
        print(f"üîê Autentica√ß√£o: OBRIGAT√ìRIA")
        print(f"üõ°Ô∏è  Sess√µes: ATIVAS")
        print(f"‚è∞ Timeout: 30 minutos")
        print("\nüéØ Para acessar:")
        print("   1. Abra http://localhost:8000")
        print("   2. Fa√ßa login com uma das contas demo")
        print("   3. Explore reposit√≥rios GitHub")
        print("   4. Gere relat√≥rios t√©cnicos an√¥nimos")
        print("\n" + "="*80)
        
        uvicorn.run(**uvicorn_config)
        
    except KeyboardInterrupt:
        print("\nüëã Encerrando DocAgent Skyone...")
        print("   Obrigado por usar o sistema!")
        print("   Todas as sess√µes foram encerradas.")
        return 0
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(main())